


            Campaign view controller


// import 'dart:convert';
// import 'package:flutter/cupertino.dart';
// import 'package:http/http.dart' as http;
// import 'package:get/get.dart';
// import 'package:prasada_political_portfolio/app/data/models/response/generic_response.dart';
// import 'package:prasada_political_portfolio/app/data/network/api_service.dart';
// import 'package:prasada_political_portfolio/app/modules/voterdetails/controller/votercontroller.dart';
// import 'package:prasada_political_portfolio/utils/loader/loading_utils.dart';
// import 'package:prasada_political_portfolio/utils/snackbar/snachbar.dart';
//
// import '../../../../widgets/custom_widgets.dart';
//
// import '../../../data/models/request/campaignmodel.dart';
// import '../../../data/models/response/getcampaign.dart';
// import '../../../data/values/urls.dart';
// import '../../../routes/app_routes.dart';
//
// Campaignget campa = Campaignget();
//
// class CampaignController extends GetxController {
//   ApiService apiService = ApiService();
//
//   VoterDetailsController voterdetails = VoterDetailsController();
//
//   // SchemeModel schememodel = SchemeModel();
//   var currentIndex = 0.obs;
//   RxInt IconColor = RxInt(0);
//   RxInt indexvalue = RxInt(0);
//   RxBool personstatus = false.obs;
//   RxString DropdownValue = "--Select--".obs;
//   RxBool changeTextField = false.obs;
//   RxBool isTicked = false.obs;
//   Rx<bool?> influencer_checkbox = false.obs;
//   Rx<bool?> isTicked_3 = false.obs;
//   Rx<bool?> isTicked_4 = false.obs;
//   Rx<bool?> checkbox_1 = false.obs;
//   Rx<bool?> checkbox_2 = false.obs;
//   Rx<bool?> checkbox_3 = false.obs;
//   Rx<bool?> checkbox_4 = false.obs;
//   RxList<bool> checkvalues = <bool>[].obs;
//   RxBool check = false.obs;
//   RxList schemes = RxList([]);
//   List<String> schemesstringlist = [];
//   RxList schemelist = RxList([]);
//   //User Entered Texts Controller//
//   RxString casteText = RxString("madhu");
//   RxString profText = RxString("");
//   RxString contactText = RxString("");
//   RxString partyText = RxString("");
//   RxString strText = RxString("");
//   RxString weakText = RxString("");
//   RxString con_1Text = RxString("");
//   RxString com_1Text = RxString("");
//   RxString nlAddressText = RxString("");
//   RxString nlAddress_1Text = RxString("");
//   RxString infText_1 = RxString("");
//   RxString infText_2 = RxString("");
//   RxString infText_3 = RxString("");
//   RxString infText_4 = RxString("");
//   RxString commentsText = RxString("");
//   final caste = TextEditingController();
//   final non_local_address = TextEditingController();
//   final information = TextEditingController();
//   final strength = TextEditingController();
//   final weakness = TextEditingController();
//   final dissident = TextEditingController();
//   final dissident_comment = TextEditingController();
//   final comment_contacted = TextEditingController();
//   final comment_join_party = TextEditingController();
//   final contactedby = TextEditingController();
//   final influencer = TextEditingController();
//
//   List pages = [Routes.CampaignViewupdate, Routes.edit];
//
//   @override
//   void onInit() {
//     var datra = Get.arguments;
//     // caste.text = datra.result[0].caste;
//
//     schemepost(URLs.scheme);
//     super.onInit();
//   }
//
//   changePage(int index) {
//     currentIndex.value = index;
//     IconColor = RxInt(index);
//     Get.toNamed(pages[index]);
//   }
//
//   void switchStatus(bool val) {
//     personstatus.value = val;
//   }
//
//   Dropdownstatus(String value) {
//     DropdownValue.value = value;
//     value == 'TeamContacted' ? onChangeField(true) : onChangeField(false);
//   }
//
//   onChangeField(bool val) {
//     changeTextField.value = val;
//   }
//
//   onTickBox(bool val) {
//     isTicked.value = val;
//   }
//
//   onTickBox2(bool val) {
//     influencer_checkbox.value = val;
//   }
//
//   onTickBox3(bool val) {
//     isTicked_3.value = val;
//   }
//
//   onTickBox4(bool val) {
//     isTicked_4.value = val;
//   }
//
//   onSelectItems_1(bool val) {
//     checkbox_1.value = val;
//   }
//
//   onSelectItems_2(bool val) {
//     checkbox_2.value = val;
//   }
//
//   onSelectItems_3(bool val) {
//     checkbox_3.value = val;
//   }
//
//   onSelectItems_4(bool val) {
//     checkbox_4.value = val;
//   }
//
//   onCheckList(bool val, int index) {
//     check.value = val;
//     checkvalues[index] = !checkvalues[index];
//     if (checkvalues[index]) {
//       schemes.add(schemelist[index]['SchemeName']);
//       schemesstringlist.add(schemelist[index]['SchemeName']);
//     } else {
//       schemes.remove(schemelist[index]['SchemeName']);
//       schemesstringlist.remove(schemelist[index]['SchemeName']);
//     }
//   }
//
//   onDeleteItem(int index) {
//     schemes.removeAt(index);
//   }
//
//   void schemepost(url) async {
//     var client = http.Client();
//     var respo = await client.get(Uri.parse(url),
//         headers: {'accept': 'application/json', 'Authorization': token});
//     print(respo.statusCode);
//     var x = jsonDecode(respo.body);
//     print(x);
//     schemelist = RxList(x["Result"]);
//     for (int i = 0; i < schemelist.length - 1; i++) {
//       checkvalues.add(false);
//     }
//     print("-------------line schemes $schemelist");
//     // return schememodel;
//   }
//
//   campaign_api(url, campaignmodel) async {
//     print("object");
//     try {
//       GenericResponse response =
//           await apiService.post(url: url, model: campaignmodel.toJson());
//
//       print("--- update ---${response.status}");
//
//       if (response.status == 200) {
//         InfoSnackBar("UPDATE Sucess", "Update success ");
//       } else {
//         Error_message("Updated falied", "Already User exits");
//       }
//     } on Exception {
//       Error_message("Updated falied", "Something went Wrong");
//     }
//
//     print("object");
//   }
//
// // void campaign_get_api(url) async {
// //   // String queryString = model != null ? Uri(queryParameters: model).query : '';
// //   try {
// //     // LoadingUtils.showLoader();
// //
// //     final response = await http.get(
// //         Uri.parse(url),
// //         headers: {'accept': 'application/json', 'Authorization': token});
// //     print(response.statusCode);
// //     print(response.body);
// //     if (response.statusCode == 200 || response.statusCode == 201) {
// //       campa = Campaignget.fromJson(jsonDecode(response.body));
// //       print("-  caste ------- ${campa.result![0].caste}");
// //       print("-  caste ------- ${campa.result![0].ivinId}");
// //       LoadingUtils.hideLoader();
// //       Get.toNamed(Routes.CampaignView);
// //     } else {
// //       // LoadingUtils.hideLoader();
// //       Error_message('No Data Found', '');
// //       print("------------------------------object");
// //       // getcampaignmodel = Getcampaignmodel(message: response.body, hasError: true);
// //     }
// //   } on Exception catch (error) {
// //     print("------------------------------exception");
// //     LoadingUtils.hideLoader();
// //     Error_message('No Data Found', '');
// //     // getcampaignmodel = Getcampaignmodel(message: error.toString(), hasError: true);
// //
// //   }
// //
// //
// //
// // }
//
//
//
// CampaignUpdate(id,jsonmodel) async{
//     var Url = URLs.campaign_update+id.toString();
//     GenericResponse genericResponse = await apiService.put(url: Url,model:jsonmodel );
//     print(genericResponse.message);
//     print(genericResponse.result);
//     print(genericResponse.status);
//     if(genericResponse.status==200){
//
//       InfoSnackBar("Update success","Campaign update success");
//     }
//     else{
//       Error_message("Update Failed","Campaign update failed" );
//     }
//
// }
// }








 
       Campaign view 




// import 'dart:convert';
//
// import 'package:http/http.dart' as http;
// import 'package:flutter/material.dart';
// import 'package:get/get.dart';
// import 'package:prasada_political_portfolio/app/data/values/urls.dart';
// import 'package:prasada_political_portfolio/app/modules/edit/view/schemelistview.dart';
// import 'package:prasada_political_portfolio/app/themes/app_colors.dart';
// import 'package:prasada_political_portfolio/app/themes/app_styles.dart';
// import 'package:prasada_political_portfolio/widgets/custom_widgets.dart';
// import '../../../../widgets/custom_appbar.dart';
// import '../../../data/models/request/campaignmodel.dart';
// import '../../../data/values/dimens.dart';
// import '../../../routes/app_routes.dart';
// import '../../searchscreen/controllers/searchscreencontroller.dart';
// import '../../voterdetails/controller/votercontroller.dart';
// import '../controller/campaign_controller.dart';
//
// class Campaign_View extends StatelessWidget {
//   Campaign_View({Key? key}) : super(key: key);
//   CampaignController controller = Get.put(CampaignController());
//   SecondScreenController controller1 = Get.put(SecondScreenController());
//   VoterDetailsController controller2 = VoterDetailsController();
//
//   var data = Get.arguments;
//   bool isEnabled = false;
//
//   @override
//   void initState() {
//     // TODO: implement initState
//     controller.caste.text = data.result[0].caste;
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     print("-------data--------- ${data.result[0].id}");
//     // print("-------data--------- ${campa.result?[0].caste}");
//     return Scaffold(
//       drawer: HeaderDrawer(),
//       resizeToAvoidBottomInset: false,
//       appBar: CustomAppBar(),
//       bottomNavigationBar: ElevatedButton(
//           onPressed: () {
//             Get.back();
//           },
//           style: ButtonStyle(
//               overlayColor: MaterialStateProperty.resolveWith<Color?>(
//                     (Set<MaterialState> states) {
//                   return null;
//                 },
//               ),
//               backgroundColor: MaterialStateColor.resolveWith(
//                       (states) => AppColors.whiteColor),),
//               // shape: MaterialStateProperty.all<RoundedRectangleBorder>(
//               //     RoundedRectangleBorder(
//               //         borderRadius: BorderRadius.circular(23.0),
//               //         side: const BorderSide(color: AppColors.secondaryColor)))),
//           child: Text(
//             "BACK",
//             style: AppStyles.tsBaseRegular14,
//           )),
//       // BottomNavigationBar(
//       //   items: [
//       //     BottomNavigationBarItem(icon: Icon(Icons.arrow_back),label: "back"),
//       //     BottomNavigationBarItem(icon: Icon(Icons.arrow_back),label: "back"),
//       //   ],
//       // ),
//       body: Column(
//         children: [
//           Flexible(
//             child: SingleChildScrollView(
//               padding: EdgeInsets.only(
//                   bottom: MediaQuery.of(context).viewInsets.bottom),
//               scrollDirection: Axis.vertical,
//               child: Column(
//                 children: [
//                   //------Switch Widget-1------
//                   Row(
//                     children: [
//                       Obx(() => Switch(
//                         value: controller.personstatus.value,
//                         onChanged: controller.switchStatus,
//                         activeColor: Colors.green,
//                         activeTrackColor: Colors.green.shade200,
//                       )),
//                       Obx(() => Text(
//                         controller.personstatus.value
//                             ? 'Person Alive'
//                             : 'Person Dead',
//                         style: AppStyles.tsSecondaryRegular14,
//                       )),
//                     ],
//                   ),
//                   //---Text Field Caste-Widget--------//
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Caste",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       controller: controller.caste,
//                       // initialValue: data.result?[0].caste,
//                       decoration: InputDecoration(
//                         // hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.casteText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //-----TextFormField Profession-Widget------
//                   Padding(
//                       padding: EdgeInsets.only(left: 40.0),
//                       child: Align(
//                         alignment: Alignment.centerLeft,
//                         child: Text(
//                           "Profession",
//                           style: AppStyles.tsSecondaryRegular14,
//                         ),
//                       )),
//                   Obx(
//                         () => Padding(
//                       padding: EdgeInsets.only(
//                           top: 10.0, left: 20.0, right: 20.0, bottom: 20.0),
//                       child: Container(
//                         padding: EdgeInsets.only(
//                           left: 10.0,
//                           right: 10.0,
//                         ),
//                         decoration: BoxDecoration(
//                           color: AppColors.whiteColor,
//                           borderRadius: BorderRadius.circular(20),
//                         ),
//                         child: DropdownButton(
//                           underline: Container(
//                             color: AppColors.whiteColor,
//                           ),
//                           isExpanded: true,
//                           hint: Text(
//                             'Please select Profession',
//                           ),
//                           onChanged: (String? newValue) async {
//                             controller1.Profession(
//                                 newValue ?? "please select ");
//                           },
//                           value: controller1.profession.value == ""
//                               ? null
//                               : controller1.profession.value,
//                           items: controller1.professionlist.map((selectedType) {
//                             return DropdownMenuItem(
//                               child: new Text(
//                                 selectedType,
//                                 overflow: TextOverflow.ellipsis,
//                               ),
//                               value: selectedType,
//                             );
//                           }).toList(),
//                         ),
//                       ),
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //------TextFormField ContactNumber-Widget--------
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Contact number",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       // initialValue: campa.result?[0].contactNumber.toString(),
//                       decoration: InputDecoration(
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.contactText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //----------TextFormField PartyInclination Widget-----------
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Party Inclination",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       // initialValue: campa.result?[0].partyInclination.toString(),
//                       decoration: InputDecoration(
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.partyText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //-----TextFormField Strength Widget-----------
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Strength",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       // initialValue: campa.result?[0].strength.toString(),
//                       controller: controller.strength,
//                       decoration: InputDecoration(
//                         contentPadding: EdgeInsets.all(50.0),
//                         isDense: true,
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.strText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //------TextFormField Weakness Widget-----
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Weakness",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       controller: controller.weakness,
//                       decoration: InputDecoration(
//                         contentPadding: EdgeInsets.all(50.0),
//                         isDense: true,
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.weakText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //------TextFormField ContactMode Widget-----
//                   ListTile(
//                     title: Padding(
//                       padding: EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Contact Mode",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       decoration: InputDecoration(
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                         prefixIcon: Obx(
//                               () => Align(
//                             alignment: Alignment.center,
//                             child: DropdownButton(
//                               isExpanded: true,
//                               value: controller.DropdownValue.value,
//                               hint: Text("Select"),
//                               items: [
//                                 '--Select--',
//                                 'PersonalContacted',
//                                 'TeamContacted'
//                               ].map((String eachVal) {
//                                 return DropdownMenuItem(
//                                     value: eachVal, child: Text(eachVal));
//                               }).toList(),
//                               onChanged: (value) {
//                                 controller.Dropdownstatus(value.toString());
//                                 // value == 'Team Contacted'
//                                 //     ? controller.onChangeField(true)
//                                 //     : controller.onChangeField(false);
//                               },
//                             ),
//                           ),
//                         ),
//                       ),
//                     ),
//                   ),
//                   Obx(
//                         () => ListTile(
//                       title: TextFormField(
//                         controller: controller.contactedby,
//                         decoration: InputDecoration(
//                           hintText: "Contact By",
//                           enabled: controller.changeTextField.value,
//                           enabledBorder: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide(
//                                   color: AppColors.whiteColor, width: 3)),
//                           filled: true,
//                           fillColor: AppColors.whiteColor,
//                         ),
//                         onChanged: (text) {
//                           controller.con_1Text.value = text;
//                         },
//                       ),
//                       subtitle: Padding(
//                         padding: const EdgeInsets.only(top: 18.0),
//                         child: TextFormField(
//                           controller: controller.comment_contacted,
//                           decoration: InputDecoration(
//                             hintText: "Comments",
//                             enabled: controller.changeTextField.value,
//                             enabledBorder: OutlineInputBorder(
//                                 borderRadius: BorderRadius.circular(30),
//                                 borderSide: BorderSide(
//                                     color: AppColors.whiteColor, width: 3)),
//                             filled: true,
//                             fillColor: AppColors.whiteColor,
//                           ),
//                           onChanged: (text) {
//                             controller.com_1Text.value = text;
//                           },
//                         ),
//                       ),
//                     ),
//                   ),
//
//                   //---------CheckBox address widget---------//
//                   Obx(
//                         () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Non Local Address"),
//                         value: controller.isTicked.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.onTickBox(value!);
//                           controller.isTicked.value
//                               ? isEnabled = true
//                               : isEnabled = false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: TextFormField(
//                         controller: controller.non_local_address,
//                         decoration: InputDecoration(
//                           hintText: "Address",
//                           enabled: isEnabled,
//                           enabledBorder: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide(
//                                   color: AppColors.whiteColor, width: 3)),
//                           filled: true,
//                           fillColor: AppColors.whiteColor,
//                         ),
//                         onChanged: (text) {
//                           controller.nlAddressText.value = text;
//                         },
//                       ),
//                     ),
//                   ),
//
//                   //------CheckBox Influencer Widget---------
//                   Obx(
//                         () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Influencer"),
//                         value: controller.influencer_checkbox.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.onTickBox2(value!);
//                           value == true ? isEnabled = true : isEnabled = false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: TextFormField(
//                         controller: controller.influencer,
//                         decoration: InputDecoration(
//                           hintText: "Address",
//                           enabled: isEnabled,
//                           enabledBorder: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide(
//                                   color: AppColors.whiteColor, width: 3)),
//                           filled: true,
//                           fillColor: AppColors.whiteColor,
//                         ),
//                         onChanged: (text) {
//                           controller.nlAddress_1Text.value = text;
//                         },
//                       ),
//                     ),
//                   ),
//
//                   //------Dissident Widget---------//
//                   Obx(
//                         () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Dissident"),
//                         value: controller.isTicked_3.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.onTickBox3(value!);
//                           value == true ? isEnabled = true : isEnabled = false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: ListTile(
//                         title: TextFormField(
//                           controller: controller.dissident,
//                           decoration: InputDecoration(
//                             hintText: "Information given by person",
//                             enabled: isEnabled,
//                             enabledBorder: OutlineInputBorder(
//                                 borderRadius: BorderRadius.circular(30),
//                                 borderSide: BorderSide(
//                                     color: AppColors.whiteColor, width: 3)),
//                             filled: true,
//                             fillColor: AppColors.whiteColor,
//                           ),
//                           onChanged: (text) {
//                             controller.infText_1.value = text;
//                           },
//                         ),
//                         subtitle: Padding(
//                           padding: const EdgeInsets.only(top: 15.0),
//                           child: TextFormField(
//                             controller: controller.dissident_comment,
//                             decoration: InputDecoration(
//                               hintText: "Comments",
//                               enabled: isEnabled,
//                               enabledBorder: OutlineInputBorder(
//                                   borderRadius: BorderRadius.circular(30),
//                                   borderSide: BorderSide(
//                                       color: AppColors.whiteColor, width: 3)),
//                               filled: true,
//                               fillColor: AppColors.whiteColor,
//                             ),
//                             onChanged: (text) {
//                               controller.infText_2.value = text;
//                             },
//                           ),
//                         ),
//                       ),
//                     ),
//                   ),
//
//                   //-----Checkbox Interested to join widget----//
//                   Obx(
//                         () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Intereseted to Join Party"),
//                         value: controller.isTicked_4.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.onTickBox4(value!);
//                           value == true ? isEnabled = true : isEnabled = false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: ListTile(
//                         title: TextFormField(
//                           controller: controller.information,
//                           decoration: InputDecoration(
//                             hintText: "Information given by person",
//                             enabled: isEnabled,
//                             enabledBorder: OutlineInputBorder(
//                                 borderRadius: BorderRadius.circular(30),
//                                 borderSide: BorderSide(
//                                     color: AppColors.whiteColor, width: 3)),
//                             filled: true,
//                             fillColor: AppColors.whiteColor,
//                           ),
//                           onChanged: (text) {
//                             controller.infText_3.value = text;
//                           },
//                         ),
//                         subtitle: Padding(
//                           padding: const EdgeInsets.only(top: 15.0),
//                           child: TextFormField(
//                             controller: controller.comment_join_party,
//                             decoration: InputDecoration(
//                               hintText: "Comments",
//                               enabled: isEnabled,
//                               enabledBorder: OutlineInputBorder(
//                                   borderRadius: BorderRadius.circular(30),
//                                   borderSide: BorderSide(
//                                       color: AppColors.whiteColor, width: 3)),
//                               filled: true,
//                               fillColor: AppColors.whiteColor,
//                             ),
//                             onChanged: (text) {
//                               controller.infText_4.value = text;
//                             },
//                           ),
//                         ),
//                       ),
//                     ),
//                   ),
//
//                   //---List of CheckBoxes Widget----//
//                   Obx(() => ListTile(
//                     title: CheckboxListTile(
//                       title: Text("Physically Challenged"),
//                       value: controller.checkbox_1.value,
//                       checkColor: AppColors.whiteColor,
//                       activeColor: AppColors.baseColor,
//                       onChanged: (value) {
//                         controller.onSelectItems_1(value!);
//                       },
//                       controlAffinity: ListTileControlAffinity.leading,
//                     ),
//                     subtitle: Column(
//                       children: [
//                         CheckboxListTile(
//                           title: Text("Deleted"),
//                           value: controller.checkbox_2.value,
//                           checkColor: AppColors.whiteColor,
//                           activeColor: AppColors.baseColor,
//                           onChanged: (value) {
//                             controller.onSelectItems_2(value!);
//                           },
//                           controlAffinity: ListTileControlAffinity.leading,
//                         ),
//                         CheckboxListTile(
//                           title: Text("Duplicate"),
//                           value: controller.checkbox_3.value,
//                           checkColor: AppColors.whiteColor,
//                           activeColor: AppColors.baseColor,
//                           onChanged: (value) {
//                             controller.onSelectItems_3(value!);
//                           },
//                           controlAffinity: ListTileControlAffinity.leading,
//                         ),
//                         CheckboxListTile(
//                           title: Text("Is Voted"),
//                           value: controller.checkbox_4.value,
//                           checkColor: AppColors.whiteColor,
//                           activeColor: AppColors.baseColor,
//                           onChanged: (value) {
//                             controller.onSelectItems_4(value!);
//                           },
//                           controlAffinity: ListTileControlAffinity.leading,
//                         ),
//                       ],
//                     ),
//                   )),
//
//                   //------Schemes Widget------//
//                   Obx(() => Padding(
//                     padding: EdgeInsets.all(15.0),
//                     child: Container(
//                         padding: EdgeInsets.only(
//                             left: 30.0,
//                             right: 20.0,
//                             top: 10.0,
//                             bottom: 10.0),
//                         width: Dimens.screenWidthX12,
//                         height: Dimens.imageScaleX12,
//                         decoration: BoxDecoration(
//                             borderRadius: BorderRadius.circular(20.0),
//                             color: AppColors.whiteColor),
//                         child: controller.schemes.length == 0
//                             ? Text("Select schemes below to view it")
//                             : ListView.builder(
//                             itemCount: controller.schemes.length,
//                             itemBuilder: (context, index) {
//                               return Text(controller.schemes[index]);
//                             })),
//                   )),
//
//                   Padding(
//                     padding: EdgeInsets.only(
//                         right: Dimens.paddingX4, left: Dimens.paddingX4),
//                     child: ElevatedButton(
//                       style: ElevatedButton.styleFrom(
//                           backgroundColor: AppColors.whiteColor,
//                           side: BorderSide(
//                               width:
//                               Dimens.screenWidth), //border width and color
//
//                           shape: RoundedRectangleBorder(
//                             //to set border radius to button
//                               borderRadius: BorderRadius.circular(25.0)),
//                           padding: EdgeInsets.all(
//                               Dimens.paddingX3) //content padding inside button
//                       ),
//                       child: Row(
//                         mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                         children: [
//                           Text(
//                             "Select",
//                             textAlign: TextAlign.center,
//                             style: TextStyle(color: AppColors.secondaryColor),
//                           ),
//                           Icon(
//                             Icons.arrow_drop_down_rounded,
//                             color: AppColors.secondaryColor,
//                           ),
//                         ],
//                       ),
//                       onPressed: () {
//                         controller.schemepost(URLs.scheme);
//                         Get.to(SchemesListView());
//                       },
//                     ),
//                   ),
//
//                   Padding(
//                       padding: EdgeInsets.only(
//                         left: Dimens.paddingX5,
//                         right: Dimens.paddingX5,
//                         top: Dimens.paddingX5,
//                         bottom: Dimens.paddingX2,
//                       ),
//                       child: CustomButton(
//                         buttonName: "Update",
//                         onTap: () {
//                           print(
//                               "Alive Switch Status: ${controller.personstatus.value}");
//                           print(controller.caste.text);
//                           print(controller1.profession.value);
//                           print(controller.profText.value);
//                           print(controller.contactText.value);
//                           print(controller.partyText.value);
//                           print(controller.strText.value);
//                           print(controller.weakText.value);
//                           print(controller.DropdownValue.value);
//                           print(controller.con_1Text.value);
//                           print(controller.com_1Text.value);
//                           print(controller.nlAddressText.value);
//                           print(controller.nlAddress_1Text.value);
//                           print(controller.infText_1.value);
//                           print(controller.infText_2.value);
//                           print(controller.infText_3.value);
//                           print(controller.infText_4.value);
//                           print(controller.commentsText.value);
//                           print(
//                               "Physically Challenged: ${controller.checkbox_1.value}");
//                           print("Deleted: ${controller.checkbox_2.value}");
//                           print("Duplicate: ${controller.checkbox_3.value}");
//                           print("Is Voted: ${controller.checkbox_4.value}");
//                           print(controller.schemes);
//                           print("------------ data $data");
//                           CampaignModel campaignmodel = CampaignModel(
//                               userId: 1,
//                               workerId: null,
//                               ivinId: data.result[0].ivinId,
//                               caste: controller.casteText.value,
//                               profession: controller1.profession.value,
//                               contactNumber: controller.contactText.value,
//                               partyInclination: 'Telugu Desam Party',
//                               habitations: null,
//                               schemes: controller.schemesstringlist,
//                               otherparty: controller.partyText.value,
//                               isInfluencer:
//                               controller.influencer_checkbox.value,
//                               influencedVoters: null,
//                               physicallyChallenged: controller.checkbox_1.value,
//                               deleted: controller.checkbox_2.value,
//                               duplicate: controller.checkbox_3.value,
//                               nonLocalAddress: controller.isTicked.value,
//                               currentAddress: controller.non_local_address.text,
//                               expired: controller.personstatus.value,
//                               strength: controller.strength.text,
//                               weakness: controller.weakness.text,
//                               dissident: controller.isTicked_3.value,
//                               informedPersonForDissident:
//                               controller.dissident.text,
//                               commentsForDissident:
//                               controller.dissident_comment.text,
//                               contactMode: controller.DropdownValue.value,
//                               contactedBy: controller.contactedby.text,
//                               commentsForTeamContacted:
//                               controller.comment_contacted.text,
//                               interestToJoinParty: controller.isTicked_4.value,
//                               informedPerson: controller.infText_3.value,
//                               commentsForJoinParty:
//                               controller.comment_join_party.text,
//                               isVoted: controller.checkbox_4.value); /**/
//
//                           // CampaignModel campaignmodel = CampaignModel(
//                           //   userId: 1,
//                           //   workerId: null,
//                           //   ivinId: data.result[0].ivinId,
//                           //   caste: "string",
//                           //   profession: 'PoliticalDesignation',
//                           //   contactNumber: '93985824188',
//                           //   partyInclination: 'Telugu Desam Party',
//                           //   habitations: null,
//                           //   schemes: [ "YSR Amma Vodi Scheme"],
//                           //   otherparty: 'String',
//                           //   isInfluencer: true,
//                           //   influencedVoters: 25,
//                           //   physicallyChallenged: true,
//                           //   deleted: true,
//                           //   duplicate: true,
//                           //   nonLocalAddress: true,
//                           //   currentAddress: 'string',
//                           //   expired: true,
//                           //   strength: "strenhd",
//                           //   weakness: "weakness",
//                           //   dissident: true,
//                           //   informedPersonForDissident: 'string',
//                           //   commentsForDissident: 'string',
//                           //   contactMode: "PersonalContacted",
//                           //   contactedBy: "string",
//                           //   commentsForTeamContacted: "string",
//                           //   interestToJoinParty: true,
//                           //   informedPerson: 'string',
//                           //   commentsForJoinParty: 'string',
//                           //   isVoted: true
//                           // );
//                           // controller.cam
//                           controller.CampaignUpdate(
//                               data.result[0].id, campaignmodel.toJson());
//                           // controller.campaign_api(
//                           //     URLs.campaign_update+data.result[0].ivinId.toString(), campaignmodel);
//                         },
//                       )),
//                   Padding(
//                     padding: EdgeInsets.only(
//                       left: Dimens.paddingX5,
//                       right: Dimens.paddingX5,
//                       bottom: Dimens.paddingX2,
//                     ),
//                     child:Container(height: Dimens.imageScaleX5,
//                         width: Dimens.screenWidthX16,
//                         child:
//                         ElevatedButton(
//                             onPressed: () {},
//                             style: ButtonStyle(
//                                 overlayColor:
//                                 MaterialStateProperty.resolveWith<Color?>(
//                                       (Set<MaterialState> states) {
//                                     return null;
//                                   },
//                                 ),
//                                 backgroundColor: MaterialStateColor.resolveWith(
//                                         (states) => AppColors.whiteColor),
//                                 shape: MaterialStateProperty.all<
//                                     RoundedRectangleBorder>(
//                                     RoundedRectangleBorder(
//                                         borderRadius: BorderRadius.circular(23.0),
//                                         side: const BorderSide(
//                                             color: Colors.white)))),
//                             child: Text(
//                               "Cancel",
//                               style: AppStyles.tsSecondaryColorRegular16,
//                             )     )),
//                   )
//                 ],
//               ),
//             ),
//           ),
//         ],
//       ),
//     );
//   }
// }




 


         ** Campaign view post ***


// import 'dart:convert';
//
// import 'package:http/http.dart' as http;
// import 'package:flutter/material.dart';
// import 'package:get/get.dart';
// import 'package:prasada_political_portfolio/app/data/values/urls.dart';
// import 'package:prasada_political_portfolio/app/modules/edit/view/schemelistview.dart';
// import 'package:prasada_political_portfolio/app/themes/app_colors.dart';
// import 'package:prasada_political_portfolio/app/themes/app_styles.dart';
// import 'package:prasada_political_portfolio/widgets/custom_widgets.dart';
// import '../../../../widgets/custom_appbar.dart';
// import '../../../data/models/request/campaignmodel.dart';
// import '../../../data/values/dimens.dart';
// import '../../../routes/app_routes.dart';
// import '../../searchscreen/controllers/searchscreencontroller.dart';
// import '../../searchscreen/views/searchscreen.dart';
// import '../../voterdetails/controller/votercontroller.dart';
// import '../controller/campaign_controller.dart';
//
// class Campaign_View_post extends StatelessWidget {
//   Campaign_View_post({Key? key}) : super(key: key);
//   CampaignController controller = Get.put(CampaignController());
//   SecondScreenController controller1 = Get.put(SecondScreenController());
//   VoterDetailsController controller2 = VoterDetailsController();
//   TextEditingController caste = TextEditingController();
//   TextEditingController contactnumber = TextEditingController();
//   TextEditingController PartyInclination = TextEditingController();
//   TextEditingController strength = TextEditingController();
//   TextEditingController weakness = TextEditingController();
//   TextEditingController comment_contacted = TextEditingController();
//   TextEditingController non_local_address = TextEditingController();
//   TextEditingController Influencer_Address = TextEditingController();
//   TextEditingController dissident = TextEditingController();
//   TextEditingController dissident_comment = TextEditingController();
//   TextEditingController information = TextEditingController();
//   TextEditingController comment_join_party = TextEditingController();
//   var data = Get.arguments;
//   bool isEnabled = false;
//
//   @override
//   void initState() {
//     // TODO: implement initState
//     controller.caste.text = data.result[0].caste;
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     // print("-------data--------- ${data.result[0].profession}");
//     // print("-------data--------- ${campa.result?[0].caste}");
//     return Scaffold(
//       drawer: HeaderDrawer(),
//       resizeToAvoidBottomInset: false,
//       appBar: CustomAppBar(),
//       bottomNavigationBar: CustomBottomNavigation(),
//       body: Column(
//         children: [
//           Flexible(
//             child: SingleChildScrollView(
//               padding: EdgeInsets.only(
//                   bottom: MediaQuery.of(context).viewInsets.bottom),
//               scrollDirection: Axis.vertical,
//               child: Column(
//                 children: [
//                   //------Switch Widget-1------
//                   Row(
//                     children: [
//                       Obx(() => Switch(
//                             value: controller.personstatus.value,
//                             onChanged: controller.switchStatus,
//                             activeColor: Colors.green,
//                             activeTrackColor: Colors.green.shade200,
//                           )),
//                       Obx(() => Text(
//                             controller.personstatus.value
//                                 ? 'Person Alive'
//                                 : 'Person Dead',
//                             style: AppStyles.tsSecondaryRegular14,
//                           )),
//                     ],
//                   ),
//                   //---Text Field Caste-Widget--------//
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Caste",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       controller: caste,
//                       // initialValue: data.result[0].caste,
//                       decoration: InputDecoration(
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.casteText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //-----TextFormField Profession-Widget------
//                   Padding(
//                       padding: EdgeInsets.only(left: 40.0),
//                       child: Align(
//                         alignment: Alignment.centerLeft,
//                         child: Text(
//                           "Profession",
//                           style: AppStyles.tsSecondaryRegular14,
//                         ),
//                       )),
//                   Obx(
//                     () => Padding(
//                       padding: EdgeInsets.only(
//                           top: 10.0, left: 20.0, right: 20.0, bottom: 20.0),
//                       child: Container(
//                         padding: EdgeInsets.only(
//                           left: 10.0,
//                           right: 10.0,
//                         ),
//                         decoration: BoxDecoration(
//                           color: AppColors.whiteColor,
//                           borderRadius: BorderRadius.circular(20),
//                         ),
//                         child: DropdownButton(
//                           underline: Container(
//                             color: AppColors.whiteColor,
//                           ),
//                           isExpanded: true,
//                           hint: Text(
//                             'Please select Profession',
//                           ),
//                           onChanged: (String? newValue) async {
//                             controller1.Profession(
//                                 newValue ?? "please select ");
//                           },
//                           value: controller1.profession.value == ""
//                               ? null
//                               : controller1.profession.value,
//                           items: controller1.professionlist.map((selectedType) {
//                             return DropdownMenuItem(
//                               child: new Text(
//                                 selectedType,
//                                 overflow: TextOverflow.ellipsis,
//                               ),
//                               value: selectedType,
//                             );
//                           }).toList(),
//                         ),
//                       ),
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //------TextFormField ContactNumber-Widget--------
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Contact number",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       controller: contactnumber,
//                       // initialValue: campa.result?[0].contactNumber.toString(),
//                       decoration: InputDecoration(
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.contactText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //----------TextFormField PartyInclination Widget-----------
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Party Inclination",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       controller: PartyInclination,
//                       // initialValue: campa.result?[0].partyInclination.toString(),
//                       decoration: InputDecoration(
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.partyText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //-----TextFormField Strength Widget-----------
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Strength",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       // initialValue: campa.result?[0].strength.toString(),
//                       controller: strength,
//                       decoration: InputDecoration(
//                         contentPadding: EdgeInsets.all(50.0),
//                         isDense: true,
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.strText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //------TextFormField Weakness Widget-----
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Weakness",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       controller: weakness,
//                       decoration: InputDecoration(
//                         contentPadding: EdgeInsets.all(50.0),
//                         isDense: true,
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.weakText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //------TextFormField ContactMode Widget-----
//                   ListTile(
//                     title: Padding(
//                       padding: EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Contact Mode",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       decoration: InputDecoration(
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                         prefixIcon: Obx(
//                           () => Align(
//                             alignment: Alignment.center,
//                             child: DropdownButton(
//                               isExpanded: true,
//                               value: controller.DropdownValue.value,
//                               hint: Text("Select"),
//                               items: [
//                                 '--Select--',
//                                 'PersonalContacted',
//                                 'TeamContacted'
//                               ].map((String eachVal) {
//                                 return DropdownMenuItem(
//                                     value: eachVal, child: Text(eachVal));
//                               }).toList(),
//                               onChanged: (value) {
//                                 controller.Dropdownstatus(value.toString());
//                                 // value == 'Team Contacted'
//                                 //     ? controller.onChangeField(true)
//                                 //     : controller.onChangeField(false);
//                               },
//                             ),
//                           ),
//                         ),
//                       ),
//                     ),
//                   ),
//                   Obx(
//                     () => ListTile(
//                       title: TextFormField(
//                         decoration: InputDecoration(
//                           hintText: "Contact By",
//                           enabled: controller.changeTextField.value,
//                           enabledBorder: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide(
//                                   color: AppColors.whiteColor, width: 3)),
//                           filled: true,
//                           fillColor: AppColors.whiteColor,
//                         ),
//                         onChanged: (text) {
//                           controller.con_1Text.value = text;
//                         },
//                       ),
//                       subtitle: Padding(
//                         padding: const EdgeInsets.only(top: 18.0),
//                         child: TextFormField(
//                           controller: comment_contacted,
//                           decoration: InputDecoration(
//                             hintText: "Comments",
//                             enabled: controller.changeTextField.value,
//                             enabledBorder: OutlineInputBorder(
//                                 borderRadius: BorderRadius.circular(30),
//                                 borderSide: BorderSide(
//                                     color: AppColors.whiteColor, width: 3)),
//                             filled: true,
//                             fillColor: AppColors.whiteColor,
//                           ),
//                           onChanged: (text) {
//                             controller.com_1Text.value = text;
//                           },
//                         ),
//                       ),
//                     ),
//                   ),
//
//                   //---------CheckBox address widget---------//
//                   Obx(
//                     () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Non Local Address"),
//                         value: controller.isTicked.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.onTickBox(value!);
//                           controller.isTicked.value
//                               ? isEnabled = true
//                               : isEnabled = false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: TextFormField(
//                         controller: non_local_address,
//                         decoration: InputDecoration(
//                           hintText: "Address",
//                           enabled: isEnabled,
//                           enabledBorder: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide(
//                                   color: AppColors.whiteColor, width: 3)),
//                           filled: true,
//                           fillColor: AppColors.whiteColor,
//                         ),
//                         onChanged: (text) {
//                           controller.nlAddressText.value = text;
//                         },
//                       ),
//                     ),
//                   ),
//
//                   //------CheckBox Influencer Widget---------
//                   Obx(
//                     () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Influencer"),
//                         value: controller.influencer_checkbox.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.onTickBox2(value!);
//                           value == true ? isEnabled = true : isEnabled = false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: TextFormField(
//                         controller: Influencer_Address,
//                         decoration: InputDecoration(
//                           hintText: "Address",
//                           enabled: isEnabled,
//                           enabledBorder: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide(
//                                   color: AppColors.whiteColor, width: 3)),
//                           filled: true,
//                           fillColor: AppColors.whiteColor,
//                         ),
//                         onChanged: (text) {
//                           controller.nlAddress_1Text.value = text;
//                         },
//                       ),
//                     ),
//                   ),
//
//                   //------Dissident Widget---------//
//                   Obx(
//                     () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Dissident"),
//                         value: controller.isTicked_3.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.onTickBox3(value!);
//                           value == true ? isEnabled = true : isEnabled = false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: ListTile(
//                         title: TextFormField(
//                           controller: dissident,
//                           decoration: InputDecoration(
//                             hintText: "Information given by person",
//                             enabled: isEnabled,
//                             enabledBorder: OutlineInputBorder(
//                                 borderRadius: BorderRadius.circular(30),
//                                 borderSide: BorderSide(
//                                     color: AppColors.whiteColor, width: 3)),
//                             filled: true,
//                             fillColor: AppColors.whiteColor,
//                           ),
//                           onChanged: (text) {
//                             controller.infText_1.value = text;
//                           },
//                         ),
//                         subtitle: Padding(
//                           padding: const EdgeInsets.only(top: 15.0),
//                           child: TextFormField(
//                             controller: dissident_comment,
//                             decoration: InputDecoration(
//                               hintText: "Comments",
//                               enabled: isEnabled,
//                               enabledBorder: OutlineInputBorder(
//                                   borderRadius: BorderRadius.circular(30),
//                                   borderSide: BorderSide(
//                                       color: AppColors.whiteColor, width: 3)),
//                               filled: true,
//                               fillColor: AppColors.whiteColor,
//                             ),
//                             onChanged: (text) {
//                               controller.infText_2.value = text;
//                             },
//                           ),
//                         ),
//                       ),
//                     ),
//                   ),
//
//                   //-----Checkbox Interested to join widget----//
//                   Obx(
//                     () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Intereseted to Join Party"),
//                         value: controller.isTicked_4.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.onTickBox4(value!);
//                           value == true ? isEnabled = true : isEnabled = false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: ListTile(
//                         title: TextFormField(
//                           controller: information,
//                           decoration: InputDecoration(
//                             hintText: "Information given by person",
//                             enabled: isEnabled,
//                             enabledBorder: OutlineInputBorder(
//                                 borderRadius: BorderRadius.circular(30),
//                                 borderSide: BorderSide(
//                                     color: AppColors.whiteColor, width: 3)),
//                             filled: true,
//                             fillColor: AppColors.whiteColor,
//                           ),
//                           onChanged: (text) {
//                             controller.infText_3.value = text;
//                           },
//                         ),
//                         subtitle: Padding(
//                           padding: const EdgeInsets.only(top: 15.0),
//                           child: TextFormField(
//                             controller: comment_join_party,
//                             decoration: InputDecoration(
//                               hintText: "Comments",
//                               enabled: isEnabled,
//                               enabledBorder: OutlineInputBorder(
//                                   borderRadius: BorderRadius.circular(30),
//                                   borderSide: BorderSide(
//                                       color: AppColors.whiteColor, width: 3)),
//                               filled: true,
//                               fillColor: AppColors.whiteColor,
//                             ),
//                             onChanged: (text) {
//                               controller.infText_4.value = text;
//                             },
//                           ),
//                         ),
//                       ),
//                     ),
//                   ),
//
//                   //---List of CheckBoxes Widget----//
//                   Obx(() => ListTile(
//                         title: CheckboxListTile(
//                           title: Text("Physically Challenged"),
//                           value: controller.checkbox_1.value,
//                           checkColor: AppColors.whiteColor,
//                           activeColor: AppColors.baseColor,
//                           onChanged: (value) {
//                             controller.onSelectItems_1(value!);
//                           },
//                           controlAffinity: ListTileControlAffinity.leading,
//                         ),
//                         subtitle: Column(
//                           children: [
//                             CheckboxListTile(
//                               title: Text("Deleted"),
//                               value: controller.checkbox_2.value,
//                               checkColor: AppColors.whiteColor,
//                               activeColor: AppColors.baseColor,
//                               onChanged: (value) {
//                                 controller.onSelectItems_2(value!);
//                               },
//                               controlAffinity: ListTileControlAffinity.leading,
//                             ),
//                             CheckboxListTile(
//                               title: Text("Duplicate"),
//                               value: controller.checkbox_3.value,
//                               checkColor: AppColors.whiteColor,
//                               activeColor: AppColors.baseColor,
//                               onChanged: (value) {
//                                 controller.onSelectItems_3(value!);
//                               },
//                               controlAffinity: ListTileControlAffinity.leading,
//                             ),
//                             CheckboxListTile(
//                               title: Text("Is Voted"),
//                               value: controller.checkbox_4.value,
//                               checkColor: AppColors.whiteColor,
//                               activeColor: AppColors.baseColor,
//                               onChanged: (value) {
//                                 controller.onSelectItems_4(value!);
//                               },
//                               controlAffinity: ListTileControlAffinity.leading,
//                             ),
//                           ],
//                         ),
//                       )),
//
//                   //------Schemes Widget------//
//                   Obx(() => Padding(
//                         padding: EdgeInsets.all(15.0),
//                         child: Container(
//                             padding: EdgeInsets.only(
//                                 left: 30.0,
//                                 right: 20.0,
//                                 top: 10.0,
//                                 bottom: 10.0),
//                             width: Dimens.screenWidthX12,
//                             height: Dimens.imageScaleX12,
//                             decoration: BoxDecoration(
//                                 borderRadius: BorderRadius.circular(20.0),
//                                 color: AppColors.whiteColor),
//                             child: controller.schemes.length == 0
//                                 ? Text("Select schemes below to view it")
//                                 : ListView.builder(
//                                     itemCount: controller.schemes.length,
//                                     itemBuilder: (context, index) {
//                                       return Text(controller.schemes[index]);
//                                     })),
//                       )),
//                   ListTile(
//                     title: ElevatedButton(
//                       style: ElevatedButton.styleFrom(
//                           backgroundColor: AppColors.whiteColor,
//                           side: BorderSide(
//                               width:
//                                   Dimens.screenWidth), //border width and color
//                           elevation: 3, //elevation of button
//                           shape: RoundedRectangleBorder(
//                               //to set border radius to button
//                               borderRadius: BorderRadius.circular(30)),
//                           padding:
//                               EdgeInsets.all(20) //content padding inside button
//                           ),
//                       child: Row(
//                         children: [
//                           Text(
//                             "Select",
//                             textAlign: TextAlign.center,
//                             style: TextStyle(color: AppColors.secondaryColor),
//                           ),
//                           Icon(
//                             Icons.arrow_drop_down_rounded,
//                             color: AppColors.secondaryColor,
//                           ),
//                         ],
//                       ),
//                       onPressed: () {
//                         controller.schemepost(URLs.scheme);
//                         Get.to(SchemesListView());
//                       },
//                     ),
//                   ),
//                   ListTile(
//                     title: Container(
//                       margin: EdgeInsets.only(top: Dimens.marginX5),
//                       child: ElevatedButton(
//                         style: ElevatedButton.styleFrom(
//                             backgroundColor: Color(0xffbF04A3D),
//                             side: BorderSide(
//                                 width: Dimens
//                                     .screenWidth), //border width and color
//                             elevation: 3, //elevation of button
//                             shape: RoundedRectangleBorder(
//                                 //to set border radius to button
//                                 borderRadius: BorderRadius.circular(30)),
//                             padding: EdgeInsets.all(
//                                 20) //content padding inside button
//                             ),
//                         child: Text("Update"),
//                         onPressed: () {
//                           print(
//                               "Alive Switch Status: ${controller.personstatus.value}");
//                           print(controller.caste.text);
//                           print(controller.profText.value);
//                           print(controller.contactText.value);
//                           print(controller.partyText.value);
//                           print(controller.strText.value);
//                           print(controller.weakText.value);
//                           print(controller.DropdownValue.value);
//                           print(controller.con_1Text.value);
//                           print(controller.com_1Text.value);
//                           print(controller.nlAddressText.value);
//                           print(controller.nlAddress_1Text.value);
//                           print(controller.infText_1.value);
//                           print(controller.infText_2.value);
//                           print(controller.infText_3.value);
//                           print(controller.infText_4.value);
//                           print(controller.commentsText.value);
//                           print(
//                               "Physically Challenged: ${controller.checkbox_1.value}");
//                           print("Deleted: ${controller.checkbox_2.value}");
//                           print("Duplicate: ${controller.checkbox_3.value}");
//                           print("Is Voted: ${controller.checkbox_4.value}");
//                           print(controller.schemes);
//                           print("------------ data $data");
//                           CampaignModel campaignmodel = CampaignModel(
//                               userId: 1,
//                               workerId: null,
//                               ivinId: int.parse(data),
//                               caste: controller.casteText.value,
//                               profession: 'PoliticalDesignation',
//                               contactNumber: controller.contactText.value,
//                               partyInclination: 'Telugu Desam Party',
//                               habitations: null,
//                               schemes: controller.schemesstringlist,
//                               otherparty: 'String',
//                               isInfluencer:
//                                   controller.influencer_checkbox.value,
//                               influencedVoters: null,
//                               physicallyChallenged: controller.checkbox_1.value,
//                               deleted: controller.checkbox_2.value,
//                               duplicate: controller.checkbox_3.value,
//                               nonLocalAddress: controller.isTicked.value,
//                               currentAddress: controller.non_local_address.text,
//                               expired: false,
//                               strength: controller.strength.text,
//                               weakness: controller.weakness.text,
//                               dissident: controller.isTicked_3.value,
//                               informedPersonForDissident:
//                                   controller.dissident.text,
//                               commentsForDissident:
//                                   controller.dissident_comment.text,
//                               contactMode: controller.DropdownValue.value,
//                               contactedBy: controller.DropdownValue.value ==
//                                       "Personal Contacted"
//                                   ? controller.DropdownValue.value
//                                   : null,
//                               commentsForTeamContacted:
//                                   controller.comment_contacted.text,
//                               interestToJoinParty: controller.isTicked_4.value,
//                               informedPerson: controller.infText_3.value,
//                               commentsForJoinParty:
//                                   controller.comment_join_party.text,
//                               isVoted: controller.checkbox_4.value);
//
//                           // CampaignModel campaignmodel = CampaignModel(
//                           //   userId: 1,
//                           //   workerId: null,
//                           //   ivinId: data,
//                           //   caste: "string",
//                           //   profession: 'PoliticalDesignation',
//                           //   contactNumber: '93985824189',
//                           //   partyInclination: 'Telugu Desam Party',
//                           //   habitations: null,
//                           //   schemes: [ "YSR Amma Vodi Scheme"],
//                           //   otherparty: 'String',
//                           //   isInfluencer: true,
//                           //   influencedVoters: 25,
//                           //   physicallyChallenged: true,
//                           //   deleted: true,
//                           //   duplicate: true,
//                           //   nonLocalAddress: true,
//                           //   currentAddress: 'string',
//                           //   expired: true,
//                           //   strength: "strenhd",
//                           //   weakness: "weakness",
//                           //   dissident: true,
//                           //   informedPersonForDissident: 'string',
//                           //   commentsForDissident: 'string',
//                           //   contactMode: "PersonalContacted",
//                           //   contactedBy: "string",
//                           //   commentsForTeamContacted: "string",
//                           //   interestToJoinParty: true,
//                           //   informedPerson: 'string',
//                           //   commentsForJoinParty: 'string',
//                           //   isVoted: true
//                           // );
//
//                           controller.campaign_api(
//                               URLs.campaign_update+data, campaignmodel);
//                         },
//                       ),
//                     ),
//                     subtitle: Container(
//                       margin: EdgeInsets.only(top: Dimens.marginX5),
//                       child: ElevatedButton(
//                         style: ElevatedButton.styleFrom(
//                             backgroundColor: AppColors.whiteColor,
//                             side: BorderSide(
//                                 width: Dimens
//                                     .screenWidth), //border width and color
//                             elevation: 3, //elevation of button
//                             shape: RoundedRectangleBorder(
//                                 //to set border radius to button
//                                 borderRadius: BorderRadius.circular(30)),
//                             padding: EdgeInsets.all(
//                                 20) //content padding inside button
//                             ),
//                         child: Text("Cancel"),
//                         onPressed: () {},
//                       ),
//                     ),
//                   )
//                 ],
//               ),
//             ),
//           ),
//         ],
//       ),
//     );
//   }
// }





           Campaign view controller optional




//
// import 'dart:convert';
// import 'package:flutter/cupertino.dart';
// import 'package:http/http.dart' as http;
// import 'package:get/get.dart';
// import 'package:prasada_political_portfolio/app/data/models/response/generic_response.dart';
// import 'package:prasada_political_portfolio/app/data/network/api_service.dart';
// import 'package:prasada_political_portfolio/app/modules/voterdetails/controller/votercontroller.dart';
// import 'package:prasada_political_portfolio/utils/loader/loading_utils.dart';
// import 'package:prasada_political_portfolio/utils/snackbar/snachbar.dart';
//
// import '../../../../widgets/custom_widgets.dart';
//
// import '../../../data/models/request/campaignmodel.dart';
// import '../../../data/models/response/getcampaign.dart';
// import '../../../data/values/urls.dart';
// import '../../../routes/app_routes.dart';
//
// Campaignget campa = Campaignget();
//
// class CampaignController extends GetxController {
//   ApiService apiService = ApiService();
//
//   VoterDetailsController voterdetails = VoterDetailsController();
//
//   // SchemeModel schememodel = SchemeModel();
//   var currentIndex = 0.obs;
//   RxInt IconColor = RxInt(0);
//   RxInt indexvalue = RxInt(0);
//   RxBool personstatus = false.obs;
//   RxString DropdownValue = "--Select--".obs;
//   RxBool changeTextField = false.obs;
//   RxBool isTicked = false.obs;
//   RxBool influencer_checkbox = false.obs;
//   RxBool isTicked_3 = false.obs;
//   RxBool isTicked_4 = false.obs;
//   Rx<bool?> checkbox_1 = false.obs;
//   Rx<bool?> checkbox_2 = false.obs;
//   Rx<bool?> checkbox_3 = false.obs;
//   Rx<bool?> checkbox_4 = false.obs;
//   RxList<bool> checkvalues = <bool>[].obs;
//   RxBool check = false.obs;
//   RxList schemes = RxList([]);
//   List<String> schemesstringlist = [];
//   RxList schemelist = RxList([]);
//   //User Entered Texts Controller//
//   RxString casteText = RxString("madhu");
//   RxString profText = RxString("");
//   RxString contactText = RxString("");
//   RxString partyText = RxString("");
//   RxString strText = RxString("");
//   RxString weakText = RxString("");
//   RxString con_1Text = RxString("");
//   RxString com_1Text = RxString("");
//   RxString nlAddressText = RxString("");
//   RxString nlAddress_1Text = RxString("");
//   RxString infText_1 = RxString("");
//   RxString infText_2 = RxString("");
//   RxString infText_3 = RxString("");
//   RxString infText_4 = RxString("");
//   RxString commentsText = RxString("");
//   final TextEditingController caste = TextEditingController();
//   final TextEditingController non_local_address = TextEditingController();
//   final TextEditingController influencer = TextEditingController();
//   final TextEditingController information = TextEditingController();
//   final TextEditingController strength = TextEditingController();
//   final TextEditingController weakness = TextEditingController();
//   final TextEditingController dissident = TextEditingController();
//   final TextEditingController dissident_comment = TextEditingController();
//   final TextEditingController comment_contacted = TextEditingController();
//   final TextEditingController comment_join_party = TextEditingController();
//   final TextEditingController contactedby = TextEditingController();
//
//   List pages = [Routes.CampaignViewupdate, Routes.edit];
//
//   @override
//   void onInit() {
//     var datra = Get.arguments;
//     // caste.text = datra.result[0].caste;
//
//     schemepost(URLs.scheme);
//     super.onInit();
//   }
//
//   changePage(int index) {
//     currentIndex.value = index;
//     IconColor = RxInt(index);
//     Get.toNamed(pages[index]);
//   }
//
//   void switchStatus(bool val) {
//     personstatus.value = val;
//   }
//
//   Dropdownstatus(String value) {
//     DropdownValue.value = value;
//     value == 'TeamContacted' ? onChangeField(true) : onChangeField(false);
//   }
//
//   onChangeField(bool val) {
//     changeTextField.value = val;
//   }
//
//   onTickBox(bool val) {
//     isTicked.value = val;
//   }
//
//   onTickBox2(bool val) {
//     influencer_checkbox.value = val;
//   }
//
//   onTickBox3(bool val) {
//     isTicked_3.value = val;
//   }
//
//   onTickBox4(bool val) {
//     isTicked_4.value = val;
//   }
//
//   onSelectItems_1(bool val) {
//     checkbox_1.value = val;
//   }
//
//   onSelectItems_2(bool val) {
//     checkbox_2.value = val;
//   }
//
//   onSelectItems_3(bool val) {
//     checkbox_3.value = val;
//   }
//
//   onSelectItems_4(bool val) {
//     checkbox_4.value = val;
//   }
//
//   onCheckList(bool val, int index) {
//     check.value = val;
//     checkvalues[index] = !checkvalues[index];
//     if (checkvalues[index]) {
//       schemes.add(schemelist[index]['SchemeName']);
//       schemesstringlist.add(schemelist[index]['SchemeName']);
//     } else {
//       schemes.remove(schemelist[index]['SchemeName']);
//       schemesstringlist.remove(schemelist[index]['SchemeName']);
//     }
//   }
//
//   onDeleteItem(int index) {
//     schemes.removeAt(index);
//   }
//
//   void schemepost(url) async {
//     var client = http.Client();
//     var respo = await client.get(Uri.parse(url),
//         headers: {'accept': 'application/json', 'Authorization': token});
//     print(respo.statusCode);
//     var x = jsonDecode(respo.body);
//     print(x);
//     schemelist = RxList(x["Result"]);
//     for (int i = 0; i < schemelist.length - 1; i++) {
//       checkvalues.add(false);
//     }
//     print("-------------line schemes $schemelist");
//     // return schememodel;
//   }
//
//   campaign_api(url, campaignmodel) async {
//     print("object");
//     try {
//       GenericResponse response =
//       await apiService.post(url: url, model: campaignmodel.toJson());
//
//       print("--- update ---${response.status}");
//
//       if (response.status == 200) {
//         InfoSnackBar("UPDATE Sucess", "Update success ");
//       } else {
//         Error_message("Updated falied", "Already User exits");
//       }
//     } on Exception {
//       Error_message("Updated falied", "Something went Wrong");
//     }
//
//     print("object");
//   }
//
// // void campaign_get_api(url) async {
// //   // String queryString = model != null ? Uri(queryParameters: model).query : '';
// //   try {
// //     // LoadingUtils.showLoader();
// //
// //     final response = await http.get(
// //         Uri.parse(url),
// //         headers: {'accept': 'application/json', 'Authorization': token});
// //     print(response.statusCode);
// //     print(response.body);
// //     if (response.statusCode == 200 || response.statusCode == 201) {
// //       campa = Campaignget.fromJson(jsonDecode(response.body));
// //       print("-  caste ------- ${campa.result![0].caste}");
// //       print("-  caste ------- ${campa.result![0].ivinId}");
// //       LoadingUtils.hideLoader();
// //       Get.toNamed(Routes.CampaignView);
// //     } else {
// //       // LoadingUtils.hideLoader();
// //       Error_message('No Data Found', '');
// //       print("------------------------------object");
// //       // getcampaignmodel = Getcampaignmodel(message: response.body, hasError: true);
// //     }
// //   } on Exception catch (error) {
// //     print("------------------------------exception");
// //     LoadingUtils.hideLoader();
// //     Error_message('No Data Found', '');
// //     // getcampaignmodel = Getcampaignmodel(message: error.toString(), hasError: true);
// //
// //   }
// //
// //
// //
// // }
//
//
//
//   CampaignUpdate(id,jsonmodel) async{
//     var Url = URLs.campaign_update+id.toString();
//     GenericResponse genericResponse = await apiService.put(url: Url,model:jsonmodel );
//     print(genericResponse.message);
//     print(genericResponse.result);
//     print(genericResponse.status);
//     if(genericResponse.status==200){
//
//       InfoSnackBar("Update success","Campaign update success");
//     }
//     else{
//       Error_message("Update Failed","Campaign update failed" );
//     }
//
//   }
// }







   campaign view post optional

// import 'dart:convert';
//
// import 'package:http/http.dart' as http;
// import 'package:flutter/material.dart';
// import 'package:get/get.dart';
// import 'package:prasada_political_portfolio/app/data/values/urls.dart';
// import 'package:prasada_political_portfolio/app/modules/edit/view/schemelistview.dart';
// import 'package:prasada_political_portfolio/app/themes/app_colors.dart';
// import 'package:prasada_political_portfolio/app/themes/app_styles.dart';
// import 'package:prasada_political_portfolio/widgets/custom_widgets.dart';
// import '../../../../widgets/custom_appbar.dart';
// import '../../../data/models/request/campaignmodel.dart';
// import '../../../data/values/dimens.dart';
// import '../../../routes/app_routes.dart';
// import '../../searchscreen/controllers/searchscreencontroller.dart';
// import '../../searchscreen/views/searchscreen.dart';
// import '../../voterdetails/controller/votercontroller.dart';
// import '../controller/campaign_controller.dart';
//
// class Campaign_View_post extends StatelessWidget {
//   Campaign_View_post({Key? key}) : super(key: key);
//   CampaignController controller = Get.put(CampaignController());
//   SecondScreenController controller1 = Get.put(SecondScreenController());
//   VoterDetailsController controller2 = VoterDetailsController();
//   TextEditingController caste = TextEditingController();
//   TextEditingController contactnumber = TextEditingController();
//   TextEditingController PartyInclination = TextEditingController();
//   TextEditingController strength = TextEditingController();
//   TextEditingController weakness = TextEditingController();
//   TextEditingController comment_contacted = TextEditingController();
//   TextEditingController non_local_address = TextEditingController();
//   TextEditingController Influencer_Address = TextEditingController();
//   TextEditingController dissident = TextEditingController();
//   TextEditingController dissident_comment = TextEditingController();
//   TextEditingController information = TextEditingController();
//   TextEditingController comment_join_party = TextEditingController();
//   var data = Get.arguments;
//   bool isEnabled = false;
//
//   @override
//   void initState() {
//     // TODO: implement initState
//     controller.caste.text = data.result[0].caste;
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     // print("-------data--------- ${data.result[0].profession}");
//     // print("-------data--------- ${campa.result?[0].caste}");
//     return Scaffold(
//       drawer: HeaderDrawer(),
//       resizeToAvoidBottomInset: false,
//       appBar: CustomAppBar(),
//       bottomNavigationBar: CustomBottomNavigation(),
//       body: Column(
//         children: [
//           Flexible(
//             child: SingleChildScrollView(
//               padding: EdgeInsets.only(
//                   bottom: MediaQuery.of(context).viewInsets.bottom),
//               scrollDirection: Axis.vertical,
//               child: Column(
//                 children: [
//                   //------Switch Widget-1------
//                   Row(
//                     children: [
//                       Obx(() => Switch(
//                         value: controller.personstatus.value,
//                         onChanged: controller.switchStatus,
//                         activeColor: Colors.green,
//                         activeTrackColor: Colors.green.shade200,
//                       )),
//                       Obx(() => Text(
//                         controller.personstatus.value
//                             ? 'Person Alive'
//                             : 'Person Dead',
//                         style: AppStyles.tsSecondaryRegular14,
//                       )),
//                     ],
//                   ),
//                   //---Text Field Caste-Widget--------//
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Caste",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       controller: caste,
//                       // initialValue: data.result[0].caste,
//                       decoration: InputDecoration(
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.casteText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //-----TextFormField Profession-Widget------
//                   Padding(
//                       padding: EdgeInsets.only(left: 40.0),
//                       child: Align(
//                         alignment: Alignment.centerLeft,
//                         child: Text(
//                           "Profession",
//                           style: AppStyles.tsSecondaryRegular14,
//                         ),
//                       )),
//                   Obx(
//                         () => Padding(
//                       padding: EdgeInsets.only(
//                           top: 10.0, left: 20.0, right: 20.0, bottom: 20.0),
//                       child: Container(
//                         padding: EdgeInsets.only(
//                           left: 10.0,
//                           right: 10.0,
//                         ),
//                         decoration: BoxDecoration(
//                           color: AppColors.whiteColor,
//                           borderRadius: BorderRadius.circular(20),
//                         ),
//                         child: DropdownButton(
//                           underline: Container(
//                             color: AppColors.whiteColor,
//                           ),
//                           isExpanded: true,
//                           hint: Text(
//                             'Please select Profession',
//                           ),
//                           onChanged: (String? newValue) async {
//                             controller1.Profession(
//                                 newValue ?? "please select ");
//                           },
//                           value: controller1.profession.value == ""
//                               ? null
//                               : controller1.profession.value,
//                           items: controller1.professionlist.map((selectedType) {
//                             return DropdownMenuItem(
//                               child: new Text(
//                                 selectedType,
//                                 overflow: TextOverflow.ellipsis,
//                               ),
//                               value: selectedType,
//                             );
//                           }).toList(),
//                         ),
//                       ),
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //------TextFormField ContactNumber-Widget--------
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Contact number",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       controller: contactnumber,
//                       // initialValue: campa.result?[0].contactNumber.toString(),
//                       decoration: InputDecoration(
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.contactText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //----------TextFormField PartyInclination Widget-----------
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Party Inclination",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       controller: PartyInclination,
//                       // initialValue: campa.result?[0].partyInclination.toString(),
//                       decoration: InputDecoration(
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.partyText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //-----TextFormField Strength Widget-----------
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Strength",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       // initialValue: campa.result?[0].strength.toString(),
//                       controller: strength,
//                       decoration: InputDecoration(
//                         contentPadding: EdgeInsets.all(50.0),
//                         isDense: true,
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.strText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //------TextFormField Weakness Widget-----
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Weakness",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       controller: weakness,
//                       decoration: InputDecoration(
//                         contentPadding: EdgeInsets.all(50.0),
//                         isDense: true,
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.weakText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //------TextFormField ContactMode Widget-----
//                   ListTile(
//                     title: Padding(
//                       padding: EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Contact Mode",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       decoration: InputDecoration(
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                         prefixIcon: Obx(
//                               () => Align(
//                             alignment: Alignment.center,
//                             child: DropdownButton(
//                               isExpanded: true,
//                               value: controller.DropdownValue.value,
//                               hint: Text("Select"),
//                               items: [
//                                 '--Select--',
//                                 'PersonalContacted',
//                                 'TeamContacted'
//                               ].map((String eachVal) {
//                                 return DropdownMenuItem(
//                                     value: eachVal, child: Text(eachVal));
//                               }).toList(),
//                               onChanged: (value) {
//                                 controller.Dropdownstatus(value.toString());
//                                 // value == 'Team Contacted'
//                                 //     ? controller.onChangeField(true)
//                                 //     : controller.onChangeField(false);
//                               },
//                             ),
//                           ),
//                         ),
//                       ),
//                     ),
//                   ),
//                   Obx(
//                         () => ListTile(
//                       title: TextFormField(
//                         decoration: InputDecoration(
//                           hintText: "Contact By",
//                           enabled: controller.changeTextField.value,
//                           enabledBorder: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide(
//                                   color: AppColors.whiteColor, width: 3)),
//                           filled: true,
//                           fillColor: AppColors.whiteColor,
//                         ),
//                         onChanged: (text) {
//                           controller.con_1Text.value = text;
//                         },
//                       ),
//                       subtitle: Padding(
//                         padding: const EdgeInsets.only(top: 18.0),
//                         child: TextFormField(
//                           controller: comment_contacted,
//                           decoration: InputDecoration(
//                             hintText: "Comments",
//                             enabled: controller.changeTextField.value,
//                             enabledBorder: OutlineInputBorder(
//                                 borderRadius: BorderRadius.circular(30),
//                                 borderSide: BorderSide(
//                                     color: AppColors.whiteColor, width: 3)),
//                             filled: true,
//                             fillColor: AppColors.whiteColor,
//                           ),
//                           onChanged: (text) {
//                             controller.com_1Text.value = text;
//                           },
//                         ),
//                       ),
//                     ),
//                   ),
//
//                   //---------CheckBox address widget---------//
//                   Obx(
//                         () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Non Local Address"),
//                         value: controller.isTicked.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.isTicked.value = value?? false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: TextFormField(
//                         controller: non_local_address,
//                         decoration: InputDecoration(
//                           hintText: "Address",
//                           enabled: controller.isTicked.value,
//                           enabledBorder: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide(
//                                   color: AppColors.whiteColor, width: 3)),
//                           filled: true,
//                           fillColor: AppColors.whiteColor,
//                         ),
//                         onChanged: (text) {
//                           controller.nlAddressText.value = text;
//                         },
//                       ),
//                     ),
//                   ),
//
//                   //------CheckBox Influencer Widget---------
//                   Obx(
//                         () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Influencer"),
//                         value: controller.influencer_checkbox.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.influencer_checkbox.value = value ?? false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: TextFormField(
//                         controller: Influencer_Address,
//                         decoration: InputDecoration(
//                           hintText: "Address",
//                           enabled: controller.influencer_checkbox.value,
//                           enabledBorder: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide(
//                                   color: AppColors.whiteColor, width: 3)),
//                           filled: true,
//                           fillColor: AppColors.whiteColor,
//                         ),
//                         onChanged: (text) {
//                           controller.nlAddress_1Text.value = text;
//                         },
//                       ),
//                     ),
//                   ),
//
//                   //------Dissident Widget---------//
//                   Obx(
//                         () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Dissident"),
//                         value: controller.isTicked_3.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.isTicked_3.value =  value ?? false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: ListTile(
//                         title: TextFormField(
//                           controller: dissident,
//                           decoration: InputDecoration(
//                             hintText: "Information given by person",
//                             enabled: controller.isTicked_3.value,
//                             enabledBorder: OutlineInputBorder(
//                                 borderRadius: BorderRadius.circular(30),
//                                 borderSide: BorderSide(
//                                     color: AppColors.whiteColor, width: 3)),
//                             filled: true,
//                             fillColor: AppColors.whiteColor,
//                           ),
//                           onChanged: (text) {
//                             controller.infText_1.value = text;
//                           },
//                         ),
//                         subtitle: Padding(
//                           padding: const EdgeInsets.only(top: 15.0),
//                           child: TextFormField(
//                             controller: dissident_comment,
//                             decoration: InputDecoration(
//                               hintText: "Comments",
//                               enabled: controller.isTicked_3.value,
//                               enabledBorder: OutlineInputBorder(
//                                   borderRadius: BorderRadius.circular(30),
//                                   borderSide: BorderSide(
//                                       color: AppColors.whiteColor, width: 3)),
//                               filled: true,
//                               fillColor: AppColors.whiteColor,
//                             ),
//                             onChanged: (text) {
//                               controller.infText_2.value = text;
//                             },
//                           ),
//                         ),
//                       ),
//                     ),
//                   ),
//
//                   //-----Checkbox Interested to join widget----//
//                   Obx(
//                         () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Intereseted to Join Party"),
//                         value: controller.isTicked_4.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.isTicked_4.value = value ?? false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: ListTile(
//                         title: TextFormField(
//                           controller: information,
//                           decoration: InputDecoration(
//                             hintText: "Information given by person",
//                             enabled: controller.isTicked_4.value,
//                             enabledBorder: OutlineInputBorder(
//                                 borderRadius: BorderRadius.circular(30),
//                                 borderSide: BorderSide(
//                                     color: AppColors.whiteColor, width: 3)),
//                             filled: true,
//                             fillColor: AppColors.whiteColor,
//                           ),
//                           onChanged: (text) {
//                             controller.infText_3.value = text;
//                           },
//                         ),
//                         subtitle: Padding(
//                           padding: const EdgeInsets.only(top: 15.0),
//                           child: TextFormField(
//                             controller: comment_join_party,
//                             decoration: InputDecoration(
//                               hintText: "Comments",
//                               enabled: controller.isTicked_4.value,
//                               enabledBorder: OutlineInputBorder(
//                                   borderRadius: BorderRadius.circular(30),
//                                   borderSide: BorderSide(
//                                       color: AppColors.whiteColor, width: 3)),
//                               filled: true,
//                               fillColor: AppColors.whiteColor,
//                             ),
//                             onChanged: (text) {
//                               controller.infText_4.value = text;
//                             },
//                           ),
//                         ),
//                       ),
//                     ),
//                   ),
//
//                   //---List of CheckBoxes Widget----//
//                   Obx(() => ListTile(
//                     title: CheckboxListTile(
//                       title: Text("Physically Challenged"),
//                       value: controller.checkbox_1.value,
//                       checkColor: AppColors.whiteColor,
//                       activeColor: AppColors.baseColor,
//                       onChanged: (value) {
//                         controller.onSelectItems_1(value!);
//                       },
//                       controlAffinity: ListTileControlAffinity.leading,
//                     ),
//                     subtitle: Column(
//                       children: [
//                         CheckboxListTile(
//                           title: Text("Deleted"),
//                           value: controller.checkbox_2.value,
//                           checkColor: AppColors.whiteColor,
//                           activeColor: AppColors.baseColor,
//                           onChanged: (value) {
//                             controller.onSelectItems_2(value!);
//                           },
//                           controlAffinity: ListTileControlAffinity.leading,
//                         ),
//                         CheckboxListTile(
//                           title: Text("Duplicate"),
//                           value: controller.checkbox_3.value,
//                           checkColor: AppColors.whiteColor,
//                           activeColor: AppColors.baseColor,
//                           onChanged: (value) {
//                             controller.onSelectItems_3(value!);
//                           },
//                           controlAffinity: ListTileControlAffinity.leading,
//                         ),
//                         CheckboxListTile(
//                           title: Text("Is Voted"),
//                           value: controller.checkbox_4.value,
//                           checkColor: AppColors.whiteColor,
//                           activeColor: AppColors.baseColor,
//                           onChanged: (value) {
//                             controller.onSelectItems_4(value!);
//                           },
//                           controlAffinity: ListTileControlAffinity.leading,
//                         ),
//                       ],
//                     ),
//                   )),
//
//                   //------Schemes Widget------//
//                   Obx(() => Padding(
//                     padding: EdgeInsets.all(15.0),
//                     child: Container(
//                         padding: EdgeInsets.only(
//                             left: 30.0,
//                             right: 20.0,
//                             top: 10.0,
//                             bottom: 10.0),
//                         width: Dimens.screenWidthX12,
//                         height: Dimens.imageScaleX12,
//                         decoration: BoxDecoration(
//                             borderRadius: BorderRadius.circular(20.0),
//                             color: AppColors.whiteColor),
//                         child: controller.schemes.length == 0
//                             ? Text("Select schemes below to view it")
//                             : ListView.builder(
//                             itemCount: controller.schemes.length,
//                             itemBuilder: (context, index) {
//                               return Text(controller.schemes[index]);
//                             })),
//                   )),
//                   ListTile(
//                     title: ElevatedButton(
//                       style: ElevatedButton.styleFrom(
//                           backgroundColor: AppColors.whiteColor,
//                           side: BorderSide(
//                               width:
//                               Dimens.screenWidth), //border width and color
//                           elevation: 3, //elevation of button
//                           shape: RoundedRectangleBorder(
//                             //to set border radius to button
//                               borderRadius: BorderRadius.circular(30)),
//                           padding:
//                           EdgeInsets.all(20) //content padding inside button
//                       ),
//                       child: Row(
//                         children: [
//                           Text(
//                             "Select",
//                             textAlign: TextAlign.center,
//                             style: TextStyle(color: AppColors.secondaryColor),
//                           ),
//                           Icon(
//                             Icons.arrow_drop_down_rounded,
//                             color: AppColors.secondaryColor,
//                           ),
//                         ],
//                       ),
//                       onPressed: () {
//                         controller.schemepost(URLs.scheme);
//                         Get.to(SchemesListView());
//                       },
//                     ),
//                   ),
//                   ListTile(
//                     title: Container(
//                       margin: EdgeInsets.only(top: Dimens.marginX5),
//                       child: ElevatedButton(
//                         style: ElevatedButton.styleFrom(
//                             backgroundColor: Color(0xffbF04A3D),
//                             side: BorderSide(
//                                 width: Dimens
//                                     .screenWidth), //border width and color
//                             elevation: 3, //elevation of button
//                             shape: RoundedRectangleBorder(
//                               //to set border radius to button
//                                 borderRadius: BorderRadius.circular(30)),
//                             padding: EdgeInsets.all(
//                                 20) //content padding inside button
//                         ),
//                         child: Text("Update"),
//                         onPressed: () {
//                           print(
//                               "Alive Switch Status: ${controller.personstatus.value}");
//                           print(controller.caste.text);
//                           print(controller.profText.value);
//                           print(controller.contactText.value);
//                           print(controller.partyText.value);
//                           print(controller.strText.value);
//                           print(controller.weakText.value);
//                           print(controller.DropdownValue.value);
//                           print(controller.con_1Text.value);
//                           print(controller.com_1Text.value);
//                           print(controller.nlAddressText.value);
//                           print(controller.nlAddress_1Text.value);
//                           print(controller.infText_1.value);
//                           print(controller.infText_2.value);
//                           print(controller.infText_3.value);
//                           print(controller.infText_4.value);
//                           print(controller.commentsText.value);
//                           print(
//                               "Physically Challenged: ${controller.checkbox_1.value}");
//                           print("Deleted: ${controller.checkbox_2.value}");
//                           print("Duplicate: ${controller.checkbox_3.value}");
//                           print("Is Voted: ${controller.checkbox_4.value}");
//                           print(controller.schemes);
//                           print("------------ data $data");
//                           CampaignModel campaignmodel = CampaignModel(
//                               userId: 1,
//                               workerId: null,
//                               ivinId: int.parse(data),
//                               caste: controller.casteText.value,
//                               profession: 'PoliticalDesignation',
//                               contactNumber: controller.contactText.value,
//                               partyInclination: 'Telugu Desam Party',
//                               habitations: null,
//                               schemes: controller.schemesstringlist,
//                               otherparty: 'String',
//                               isInfluencer:
//                               controller.influencer_checkbox.value,
//                               influencedVoters: null,
//                               physicallyChallenged: controller.checkbox_1.value,
//                               deleted: controller.checkbox_2.value,
//                               duplicate: controller.checkbox_3.value,
//                               nonLocalAddress: controller.isTicked.value,
//                               currentAddress: controller.non_local_address.text,
//                               expired: false,
//                               strength: controller.strength.text,
//                               weakness: controller.weakness.text,
//                               dissident: controller.isTicked_3.value,
//                               informedPersonForDissident:
//                               controller.dissident.text,
//                               commentsForDissident:
//                               controller.dissident_comment.text,
//                               contactMode: controller.DropdownValue.value,
//                               contactedBy: controller.DropdownValue.value ==
//                                   "Personal Contacted"
//                                   ? controller.DropdownValue.value
//                                   : null,
//                               commentsForTeamContacted:
//                               controller.comment_contacted.text,
//                               interestToJoinParty: controller.isTicked_4.value,
//                               informedPerson: controller.infText_3.value,
//                               commentsForJoinParty:
//                               controller.comment_join_party.text,
//                               isVoted: controller.checkbox_4.value);
//
//                           // CampaignModel campaignmodel = CampaignModel(
//                           //   userId: 1,
//                           //   workerId: null,
//                           //   ivinId: data,
//                           //   caste: "string",
//                           //   profession: 'PoliticalDesignation',
//                           //   contactNumber: '93985824189',
//                           //   partyInclination: 'Telugu Desam Party',
//                           //   habitations: null,
//                           //   schemes: [ "YSR Amma Vodi Scheme"],
//                           //   otherparty: 'String',
//                           //   isInfluencer: true,
//                           //   influencedVoters: 25,
//                           //   physicallyChallenged: true,
//                           //   deleted: true,
//                           //   duplicate: true,
//                           //   nonLocalAddress: true,
//                           //   currentAddress: 'string',
//                           //   expired: true,
//                           //   strength: "strenhd",
//                           //   weakness: "weakness",
//                           //   dissident: true,
//                           //   informedPersonForDissident: 'string',
//                           //   commentsForDissident: 'string',
//                           //   contactMode: "PersonalContacted",
//                           //   contactedBy: "string",
//                           //   commentsForTeamContacted: "string",
//                           //   interestToJoinParty: true,
//                           //   informedPerson: 'string',
//                           //   commentsForJoinParty: 'string',
//                           //   isVoted: true
//                           // );
//
//                           controller.campaign_api(
//                               URLs.campaign_update+data, campaignmodel);
//                         },
//                       ),
//                     ),
//                     subtitle: Container(
//                       margin: EdgeInsets.only(top: Dimens.marginX5),
//                       child: ElevatedButton(
//                         style: ElevatedButton.styleFrom(
//                             backgroundColor: AppColors.whiteColor,
//                             side: BorderSide(
//                                 width: Dimens
//                                     .screenWidth), //border width and color
//                             elevation: 3, //elevation of button
//                             shape: RoundedRectangleBorder(
//                               //to set border radius to button
//                                 borderRadius: BorderRadius.circular(30)),
//                             padding: EdgeInsets.all(
//                                 20) //content padding inside button
//                         ),
//                         child: Text("Cancel"),
//                         onPressed: () {},
//                       ),
//                     ),
//                   )
//                 ],
//               ),
//             ),
//           ),
//         ],
//       ),
//     );
//   }
// }








Campaign view optional





// import 'dart:convert';
// import 'package:http/http.dart' as http;
// import 'package:flutter/material.dart';
// import 'package:get/get.dart';
// import 'package:prasada_political_portfolio/app/data/values/urls.dart';
// import 'package:prasada_political_portfolio/app/modules/edit/view/schemelistview.dart';
// import 'package:prasada_political_portfolio/app/themes/app_colors.dart';
// import 'package:prasada_political_portfolio/app/themes/app_styles.dart';
// import 'package:prasada_political_portfolio/widgets/custom_widgets.dart';
// import '../../../../widgets/custom_appbar.dart';
// import '../../../data/models/request/campaignmodel.dart';
// import '../../../data/values/dimens.dart';
// import '../../../routes/app_routes.dart';
// import '../../searchscreen/controllers/searchscreencontroller.dart';
// import '../../voterdetails/controller/votercontroller.dart';
// import '../controller/campaign_controller.dart';
//
// class Campaign_View extends StatelessWidget {
//   Campaign_View({Key? key}) : super(key: key);
//   CampaignController controller = Get.put(CampaignController());
//   SecondScreenController controller1 = Get.put(SecondScreenController());
//   VoterDetailsController controller2 = VoterDetailsController();
//
//   var data = Get.arguments;
//   bool isEnabled = false;
//
//   @override
//   void initState() {
//     // TODO: implement initState
//     controller.caste.text = data.result[0].caste;
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     print("-------data--------- ${data.result[0].id}");
//     // print("-------data--------- ${campa.result?[0].caste}");
//     return Scaffold(
//       drawer: HeaderDrawer(),
//       resizeToAvoidBottomInset: false,
//       appBar: CustomAppBar(),
//       bottomNavigationBar: ElevatedButton(
//           onPressed: () {
//             Get.back();
//           },
//           style: ButtonStyle(
//             overlayColor: MaterialStateProperty.resolveWith<Color?>(
//                   (Set<MaterialState> states) {
//                 return null;
//               },
//             ),
//             backgroundColor: MaterialStateColor.resolveWith(
//                     (states) => AppColors.whiteColor),),
//           // shape: MaterialStateProperty.all<RoundedRectangleBorder>(
//           //     RoundedRectangleBorder(
//           //         borderRadius: BorderRadius.circular(23.0),
//           //         side: const BorderSide(color: AppColors.secondaryColor)))),
//           child: Text(
//             "BACK",
//             style: AppStyles.tsBaseRegular14,
//           )),
//       // BottomNavigationBar(
//       //   items: [
//       //     BottomNavigationBarItem(icon: Icon(Icons.arrow_back),label: "back"),
//       //     BottomNavigationBarItem(icon: Icon(Icons.arrow_back),label: "back"),
//       //   ],
//       // ),
//       body: Column(
//         children: [
//           Flexible(
//             child: SingleChildScrollView(
//               padding: EdgeInsets.only(
//                   bottom: MediaQuery.of(context).viewInsets.bottom),
//               scrollDirection: Axis.vertical,
//               child: Column(
//                 children: [
//                   //------Switch Widget-1------
//                   Row(
//                     children: [
//                       Obx(() => Switch(
//                         value: controller.personstatus.value,
//                         onChanged: controller.switchStatus,
//                         activeColor: Colors.green,
//                         activeTrackColor: Colors.green.shade200,
//                       )),
//                       Obx(() => Text(
//                         controller.personstatus.value
//                             ? 'Person Alive'
//                             : 'Person Dead',
//                         style: AppStyles.tsSecondaryRegular14,
//                       )),
//                     ],
//                   ),
//                   //---Text Field Caste-Widget--------//
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Caste",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       controller: controller.caste,
//                       // initialValue: data.result?[0].caste,
//                       decoration: InputDecoration(
//                         // hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.casteText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //-----TextFormField Profession-Widget------
//                   Padding(
//                       padding: EdgeInsets.only(left: 40.0),
//                       child: Align(
//                         alignment: Alignment.centerLeft,
//                         child: Text(
//                           "Profession",
//                           style: AppStyles.tsSecondaryRegular14,
//                         ),
//                       )),
//                   Obx(
//                         () => Padding(
//                       padding: EdgeInsets.only(
//                           top: 10.0, left: 20.0, right: 20.0, bottom: 20.0),
//                       child: Container(
//                         padding: EdgeInsets.only(
//                           left: 10.0,
//                           right: 10.0,
//                         ),
//                         decoration: BoxDecoration(
//                           color: AppColors.whiteColor,
//                           borderRadius: BorderRadius.circular(20),
//                         ),
//                         child: DropdownButton(
//                           underline: Container(
//                             color: AppColors.whiteColor,
//                           ),
//                           isExpanded: true,
//                           hint: Text(
//                             'Please select Profession',
//                           ),
//                           onChanged: (String? newValue) async {
//                             controller1.Profession(
//                                 newValue ?? "please select ");
//                           },
//                           value: controller1.profession.value == ""
//                               ? null
//                               : controller1.profession.value,
//                           items: controller1.professionlist.map((selectedType) {
//                             return DropdownMenuItem(
//                               child: new Text(
//                                 selectedType,
//                                 overflow: TextOverflow.ellipsis,
//                               ),
//                               value: selectedType,
//                             );
//                           }).toList(),
//                         ),
//                       ),
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //------TextFormField ContactNumber-Widget--------
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Contact number",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       // initialValue: campa.result?[0].contactNumber.toString(),
//                       decoration: InputDecoration(
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.contactText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //----------TextFormField PartyInclination Widget-----------
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Party Inclination",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       // initialValue: campa.result?[0].partyInclination.toString(),
//                       decoration: InputDecoration(
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.partyText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //-----TextFormField Strength Widget-----------
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Strength",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       // initialValue: campa.result?[0].strength.toString(),
//                       controller: controller.strength,
//                       decoration: InputDecoration(
//                         contentPadding: EdgeInsets.all(50.0),
//                         isDense: true,
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.strText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //------TextFormField Weakness Widget-----
//                   ListTile(
//                     title: Padding(
//                       padding: const EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Weakness",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       controller: controller.weakness,
//                       decoration: InputDecoration(
//                         contentPadding: EdgeInsets.all(50.0),
//                         isDense: true,
//                         hintText: "Type here",
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                       ),
//                       onChanged: (text) {
//                         controller.weakText.value = text;
//                       },
//                     ),
//                   ),
//                   SizedBox(
//                     height: 30,
//                   ),
//
//                   //------TextFormField ContactMode Widget-----
//                   ListTile(
//                     title: Padding(
//                       padding: EdgeInsets.only(
//                           left: Dimens.paddingX3, bottom: Dimens.paddingX2),
//                       child: Text(
//                         "Contact Mode",
//                         style: AppStyles.tsSecondaryRegular14,
//                       ),
//                     ),
//                     subtitle: TextFormField(
//                       decoration: InputDecoration(
//                         enabledBorder: OutlineInputBorder(
//                             borderRadius: BorderRadius.circular(30),
//                             borderSide: BorderSide(
//                                 color: AppColors.whiteColor, width: 3)),
//                         filled: true,
//                         fillColor: AppColors.whiteColor,
//                         prefixIcon: Obx(
//                               () => Align(
//                             alignment: Alignment.center,
//                             child: DropdownButton(
//                               isExpanded: true,
//                               value: controller.DropdownValue.value,
//                               hint: Text("Select"),
//                               items: [
//                                 '--Select--',
//                                 'PersonalContacted',
//                                 'TeamContacted'
//                               ].map((String eachVal) {
//                                 return DropdownMenuItem(
//                                     value: eachVal, child: Text(eachVal));
//                               }).toList(),
//                               onChanged: (value) {
//                                 controller.Dropdownstatus(value.toString());
//                                 // value == 'Team Contacted'
//                                 //     ? controller.onChangeField(true)
//                                 //     : controller.onChangeField(false);
//                               },
//                             ),
//                           ),
//                         ),
//                       ),
//                     ),
//                   ),
//                   Obx(
//                         () => ListTile(
//                       title: TextFormField(
//                         controller: controller.contactedby,
//                         decoration: InputDecoration(
//                           hintText: "Contact By",
//                           enabled: controller.changeTextField.value,
//                           enabledBorder: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide(
//                                   color: AppColors.whiteColor, width: 3)),
//                           filled: true,
//                           fillColor: AppColors.whiteColor,
//                         ),
//                         onChanged: (text) {
//                           controller.con_1Text.value = text;
//                         },
//                       ),
//                       subtitle: Padding(
//                         padding: const EdgeInsets.only(top: 18.0),
//                         child: TextFormField(
//                           controller: controller.comment_contacted,
//                           decoration: InputDecoration(
//                             hintText: "Comments",
//                             enabled: controller.changeTextField.value,
//                             enabledBorder: OutlineInputBorder(
//                                 borderRadius: BorderRadius.circular(30),
//                                 borderSide: BorderSide(
//                                     color: AppColors.whiteColor, width: 3)),
//                             filled: true,
//                             fillColor: AppColors.whiteColor,
//                           ),
//                           onChanged: (text) {
//                             controller.com_1Text.value = text;
//                           },
//                         ),
//                       ),
//                     ),
//                   ),
//
//                   //---------CheckBox address widget---------//
//                   Obx(
//                         () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Non Local Address"),
//                         value: controller.isTicked.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (bool? value) {
//                           controller.isTicked.value = value??false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: TextFormField(
//                         controller: controller.non_local_address,
//                         decoration: InputDecoration(
//                           hintText: "Address",
//                           enabled: controller.isTicked.value,
//                           enabledBorder: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide(
//                                   color: AppColors.whiteColor, width: 3)),
//                           filled: true,
//                           fillColor: AppColors.whiteColor,
//                         ),
//                         onChanged: (text) {
//                           controller.nlAddressText.value = text;
//                         },
//                       ),
//                     ),
//                   ),
//
//                   //------CheckBox Influencer Widget---------
//                   Obx(
//                         () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Influencer"),
//                         value: controller.influencer_checkbox.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.influencer_checkbox.value = value??false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: TextFormField(
//                         controller: controller.influencer,
//                         decoration: InputDecoration(
//                           hintText: "Address",
//                           enabled: controller.influencer_checkbox.value,
//                           enabledBorder: OutlineInputBorder(
//                               borderRadius: BorderRadius.circular(30),
//                               borderSide: BorderSide(
//                                   color: AppColors.whiteColor, width: 3)),
//                           filled: true,
//                           fillColor: AppColors.whiteColor,
//                         ),
//                         onChanged: (text) {
//                           controller.nlAddress_1Text.value = text;
//                         },
//                       ),
//                     ),
//                   ),
//
//                   //------Dissident Widget---------//
//                   Obx(
//                         () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Dissident"),
//                         value: controller.isTicked_3.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.isTicked_3.value = value ??false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: ListTile(
//                         title: TextFormField(
//                           controller: controller.dissident,
//                           decoration: InputDecoration(
//                             hintText: "Information given by person",
//                             enabled: controller.isTicked_3.value,
//                             enabledBorder: OutlineInputBorder(
//                                 borderRadius: BorderRadius.circular(30),
//                                 borderSide: BorderSide(
//                                     color: AppColors.whiteColor, width: 3)),
//                             filled: true,
//                             fillColor: AppColors.whiteColor,
//                           ),
//                           onChanged: (text) {
//                             controller.infText_1.value = text;
//                           },
//                         ),
//                         subtitle: Padding(
//                           padding: const EdgeInsets.only(top: 15.0),
//                           child: TextFormField(
//                             controller: controller.dissident_comment,
//                             decoration: InputDecoration(
//                               hintText: "Comments",
//                               enabled: controller.isTicked_3.value,
//                               enabledBorder: OutlineInputBorder(
//                                   borderRadius: BorderRadius.circular(30),
//                                   borderSide: BorderSide(
//                                       color: AppColors.whiteColor, width: 3)),
//                               filled: true,
//                               fillColor: AppColors.whiteColor,
//                             ),
//                             onChanged: (text) {
//                               controller.infText_2.value = text;
//                             },
//                           ),
//                         ),
//                       ),
//                     ),
//                   ),
//
//                   //-----Checkbox Interested to join widget----//
//                   Obx(
//                         () => ListTile(
//                       title: CheckboxListTile(
//                         title: Text("Intereseted to Join Party"),
//                         value: controller.isTicked_4.value,
//                         checkColor: AppColors.whiteColor,
//                         activeColor: AppColors.baseColor,
//                         onChanged: (value) {
//                           controller.isTicked_4.value = value ?? false;
//                         },
//                         controlAffinity: ListTileControlAffinity.leading,
//                       ),
//                       subtitle: ListTile(
//                         title: TextFormField(
//                           controller: controller.information,
//                           decoration: InputDecoration(
//                             hintText: "Information given by person",
//                             enabled: controller.isTicked_4.value,
//                             enabledBorder: OutlineInputBorder(
//                                 borderRadius: BorderRadius.circular(30),
//                                 borderSide: BorderSide(
//                                     color: AppColors.whiteColor, width: 3)),
//                             filled: true,
//                             fillColor: AppColors.whiteColor,
//                           ),
//                           onChanged: (text) {
//                             controller.infText_3.value = text;
//                           },
//                         ),
//                         subtitle: Padding(
//                           padding: const EdgeInsets.only(top: 15.0),
//                           child: TextFormField(
//                             controller: controller.comment_join_party,
//                             decoration: InputDecoration(
//                               hintText: "Comments",
//                               enabled: controller.isTicked_4.value,
//                               enabledBorder: OutlineInputBorder(
//                                   borderRadius: BorderRadius.circular(30),
//                                   borderSide: BorderSide(
//                                       color: AppColors.whiteColor, width: 3)),
//                               filled: true,
//                               fillColor: AppColors.whiteColor,
//                             ),
//                             onChanged: (text) {
//                               controller.infText_4.value = text;
//                             },
//                           ),
//                         ),
//                       ),
//                     ),
//                   ),
//
//                   //---List of CheckBoxes Widget----//
//                   Obx(() => ListTile(
//                     title: CheckboxListTile(
//                       title: Text("Physically Challenged"),
//                       value: controller.checkbox_1.value,
//                       checkColor: AppColors.whiteColor,
//                       activeColor: AppColors.baseColor,
//                       onChanged: (value) {
//                         controller.onSelectItems_1(value!);
//                       },
//                       controlAffinity: ListTileControlAffinity.leading,
//                     ),
//                     subtitle: Column(
//                       children: [
//                         CheckboxListTile(
//                           title: Text("Deleted"),
//                           value: controller.checkbox_2.value,
//                           checkColor: AppColors.whiteColor,
//                           activeColor: AppColors.baseColor,
//                           onChanged: (value) {
//                             controller.onSelectItems_2(value!);
//                           },
//                           controlAffinity: ListTileControlAffinity.leading,
//                         ),
//                         CheckboxListTile(
//                           title: Text("Duplicate"),
//                           value: controller.checkbox_3.value,
//                           checkColor: AppColors.whiteColor,
//                           activeColor: AppColors.baseColor,
//                           onChanged: (value) {
//                             controller.onSelectItems_3(value!);
//                           },
//                           controlAffinity: ListTileControlAffinity.leading,
//                         ),
//                         CheckboxListTile(
//                           title: Text("Is Voted"),
//                           value: controller.checkbox_4.value,
//                           checkColor: AppColors.whiteColor,
//                           activeColor: AppColors.baseColor,
//                           onChanged: (value) {
//                             controller.onSelectItems_4(value!);
//                           },
//                           controlAffinity: ListTileControlAffinity.leading,
//                         ),
//                       ],
//                     ),
//                   )),
//
//                   //------Schemes Widget------//
//                   Obx(() => Padding(
//                     padding: EdgeInsets.all(15.0),
//                     child: Container(
//                         padding: EdgeInsets.only(
//                             left: 30.0,
//                             right: 20.0,
//                             top: 10.0,
//                             bottom: 10.0),
//                         width: Dimens.screenWidthX12,
//                         height: Dimens.imageScaleX12,
//                         decoration: BoxDecoration(
//                             borderRadius: BorderRadius.circular(20.0),
//                             color: AppColors.whiteColor),
//                         child: controller.schemes.length == 0
//                             ? Text("Select schemes below to view it")
//                             : ListView.builder(
//                             itemCount: controller.schemes.length,
//                             itemBuilder: (context, index) {
//                               return Text(controller.schemes[index]);
//                             })),
//                   )),
//
//                   Padding(
//                     padding: EdgeInsets.only(
//                         right: Dimens.paddingX4, left: Dimens.paddingX4),
//                     child: ElevatedButton(
//                       style: ElevatedButton.styleFrom(
//                           backgroundColor: AppColors.whiteColor,
//                           side: BorderSide(
//                               width:
//                               Dimens.screenWidth), //border width and color
//
//                           shape: RoundedRectangleBorder(
//                             //to set border radius to button
//                               borderRadius: BorderRadius.circular(25.0)),
//                           padding: EdgeInsets.all(
//                               Dimens.paddingX3) //content padding inside button
//                       ),
//                       child: Row(
//                         mainAxisAlignment: MainAxisAlignment.spaceBetween,
//                         children: [
//                           Text(
//                             "Select",
//                             textAlign: TextAlign.center,
//                             style: TextStyle(color: AppColors.secondaryColor),
//                           ),
//                           Icon(
//                             Icons.arrow_drop_down_rounded,
//                             color: AppColors.secondaryColor,
//                           ),
//                         ],
//                       ),
//                       onPressed: () {
//                         controller.schemepost(URLs.scheme);
//                         Get.to(SchemesListView());
//                       },
//                     ),
//                   ),
//
//                   Padding(
//                       padding: EdgeInsets.only(
//                         left: Dimens.paddingX5,
//                         right: Dimens.paddingX5,
//                         top: Dimens.paddingX5,
//                         bottom: Dimens.paddingX2,
//                       ),
//                       child: CustomButton(
//                         buttonName: "Update",
//                         onTap: () {
//                           print(
//                               "Alive Switch Status: ${controller.personstatus.value}");
//                           print(controller.caste.text);
//                           print(controller1.profession.value);
//                           print(controller.profText.value);
//                           print(controller.contactText.value);
//                           print(controller.partyText.value);
//                           print(controller.strText.value);
//                           print(controller.weakText.value);
//                           print(controller.DropdownValue.value);
//                           print(controller.con_1Text.value);
//                           print(controller.com_1Text.value);
//                           print(controller.nlAddressText.value);
//                           print(controller.nlAddress_1Text.value);
//                           print(controller.infText_1.value);
//                           print(controller.infText_2.value);
//                           print(controller.infText_3.value);
//                           print(controller.infText_4.value);
//                           print(controller.commentsText.value);
//                           print(
//                               "Physically Challenged: ${controller.checkbox_1.value}");
//                           print("Deleted: ${controller.checkbox_2.value}");
//                           print("Duplicate: ${controller.checkbox_3.value}");
//                           print("Is Voted: ${controller.checkbox_4.value}");
//                           print(controller.schemes);
//                           print("------------ data $data");
//                           CampaignModel campaignmodel = CampaignModel(
//                               userId: 1,
//                               workerId: null,
//                               ivinId: data.result[0].ivinId,
//                               caste: controller.casteText.value,
//                               profession: controller1.profession.value,
//                               contactNumber: controller.contactText.value,
//                               partyInclination: 'Telugu Desam Party',
//                               habitations: null,
//                               schemes: controller.schemesstringlist,
//                               otherparty: controller.partyText.value,
//                               isInfluencer:
//                               controller.influencer_checkbox.value,
//                               influencedVoters: null,
//                               physicallyChallenged: controller.checkbox_1.value,
//                               deleted: controller.checkbox_2.value,
//                               duplicate: controller.checkbox_3.value,
//                               nonLocalAddress: controller.isTicked.value,
//                               currentAddress: controller.non_local_address.text,
//                               expired: controller.personstatus.value,
//                               strength: controller.strength.text,
//                               weakness: controller.weakness.text,
//                               dissident: controller.isTicked_3.value,
//                               informedPersonForDissident:
//                               controller.dissident.text,
//                               commentsForDissident:
//                               controller.dissident_comment.text,
//                               contactMode: controller.DropdownValue.value,
//                               contactedBy: controller.contactedby.text,
//                               commentsForTeamContacted:
//                               controller.comment_contacted.text,
//                               interestToJoinParty: controller.isTicked_4.value,
//                               informedPerson: controller.infText_3.value,
//                               commentsForJoinParty:
//                               controller.comment_join_party.text,
//                               isVoted: controller.checkbox_4.value); /**/
//
//                           // CampaignModel campaignmodel = CampaignModel(
//                           //   userId: 1,
//                           //   workerId: null,
//                           //   ivinId: data.result[0].ivinId,
//                           //   caste: "string",
//                           //   profession: 'PoliticalDesignation',
//                           //   contactNumber: '93985824188',
//                           //   partyInclination: 'Telugu Desam Party',
//                           //   habitations: null,
//                           //   schemes: [ "YSR Amma Vodi Scheme"],
//                           //   otherparty: 'String',
//                           //   isInfluencer: true,
//                           //   influencedVoters: 25,
//                           //   physicallyChallenged: true,
//                           //   deleted: true,
//                           //   duplicate: true,
//                           //   nonLocalAddress: true,
//                           //   currentAddress: 'string',
//                           //   expired: true,
//                           //   strength: "strenhd",
//                           //   weakness: "weakness",
//                           //   dissident: true,
//                           //   informedPersonForDissident: 'string',
//                           //   commentsForDissident: 'string',
//                           //   contactMode: "PersonalContacted",
//                           //   contactedBy: "string",
//                           //   commentsForTeamContacted: "string",
//                           //   interestToJoinParty: true,
//                           //   informedPerson: 'string',
//                           //   commentsForJoinParty: 'string',
//                           //   isVoted: true
//                           // );
//                           // controller.cam
//                           controller.CampaignUpdate(
//                               data.result[0].id, campaignmodel.toJson());
//                           // controller.campaign_api(
//                           //     URLs.campaign_update+data.result[0].ivinId.toString(), campaignmodel);
//                         },
//                       )),
//                   Padding(
//                     padding: EdgeInsets.only(
//                       left: Dimens.paddingX5,
//                       right: Dimens.paddingX5,
//                       bottom: Dimens.paddingX2,
//                     ),
//                     child:Container(height: Dimens.imageScaleX5,
//                         width: Dimens.screenWidthX16,
//                         child:
//                         ElevatedButton(
//                             onPressed: () {},
//                             style: ButtonStyle(
//                                 overlayColor:
//                                 MaterialStateProperty.resolveWith<Color?>(
//                                       (Set<MaterialState> states) {
//                                     return null;
//                                   },
//                                 ),
//                                 backgroundColor: MaterialStateColor.resolveWith(
//                                         (states) => AppColors.whiteColor),
//                                 shape: MaterialStateProperty.all<
//                                     RoundedRectangleBorder>(
//                                     RoundedRectangleBorder(
//                                         borderRadius: BorderRadius.circular(23.0),
//                                         side: const BorderSide(
//                                             color: Colors.white)))),
//                             child: Text(
//                               "Cancel",
//                               style: AppStyles.tsSecondaryColorRegular16,
//                             )     )),
//                   )
//                 ],
//               ),
//             ),
//           ),
//         ],
//       ),
//     );
//   }
// }






*** Campaign view post lo button***





 // ElevatedButton(
                        //   style: ElevatedButton.styleFrom(
                        //       backgroundColor: Color(0xffbF04A3D),
                        //       side: BorderSide(
                        //           width: Dimens
                        //               .screenWidth), //border width and color
                        //       elevation: 3, //elevation of button
                        //       shape: RoundedRectangleBorder(
                        //           //to set border radius to button
                        //           borderRadius: BorderRadius.circular(30)),
                        //       //content padding inside button
                        //       ),
                        //   child: Text("Update",style: AppStyles.tsSecondaryRegular14,),
                        //   onPressed: () {
                        //     print(
                        //         "Alive Switch Status: ${controller.personstatus.value}");
                        //     print(controller.caste.text);
                        //     print(controller.profText.value);
                        //     print(controller.contactText.value);
                        //     print(controller.partyText.value);
                        //     print(controller.strText.value);
                        //     print(controller.weakText.value);
                        //     print(controller.DropdownValue.value);
                        //     print(controller.con_1Text.value);
                        //     print(controller.com_1Text.value);
                        //     print(controller.nlAddressText.value);
                        //     print(controller.nlAddress_1Text.value);
                        //     print(controller.infText_1.value);
                        //     print(controller.infText_2.value);
                        //     print(controller.infText_3.value);
                        //     print(controller.infText_4.value);
                        //     print(controller.commentsText.value);
                        //     print(
                        //         "Physically Challenged: ${controller.checkbox_1.value}");
                        //     print("Deleted: ${controller.checkbox_2.value}");
                        //     print("Duplicate: ${controller.checkbox_3.value}");
                        //     print("Is Voted: ${controller.checkbox_4.value}");
                        //     print(controller.schemes);
                        //     print("------------ data $data");
                        //     CampaignModel campaignmodel = CampaignModel(
                        //         userId: 1,
                        //         workerId: null,
                        //         ivinId: int.parse(data),
                        //         caste: controller.casteText.value,
                        //         profession: 'PoliticalDesignation',
                        //         contactNumber: controller.contactText.value,
                        //         partyInclination: 'Telugu Desam Party',
                        //         habitations: null,
                        //         schemes: controller.schemesstringlist,
                        //         otherparty: 'String',
                        //         isInfluencer:
                        //             controller.influencer_checkbox.value,
                        //         influencedVoters: null,
                        //         physicallyChallenged:
                        //             controller.checkbox_1.value,
                        //         deleted: controller.checkbox_2.value,
                        //         duplicate: controller.checkbox_3.value,
                        //         nonLocalAddress: controller.isTicked.value,
                        //         currentAddress:
                        //             controller.non_local_address.text,
                        //         expired: false,
                        //         strength: controller.strength.text,
                        //         weakness: controller.weakness.text,
                        //         dissident: controller.isTicked_3.value,
                        //         informedPersonForDissident:
                        //             controller.dissident.text,
                        //         commentsForDissident:
                        //             controller.dissident_comment.text,
                        //         contactMode: controller.DropdownValue.value,
                        //         contactedBy: controller.DropdownValue.value ==
                        //                 "Personal Contacted"
                        //             ? controller.DropdownValue.value
                        //             : null,
                        //         commentsForTeamContacted:
                        //             controller.comment_contacted.text,
                        //         interestToJoinParty:
                        //             controller.isTicked_4.value,
                        //         informedPerson: controller.infText_3.value,
                        //         commentsForJoinParty:
                        //             controller.comment_join_party.text,
                        //         isVoted: controller.checkbox_4.value);
                        //
                        //     // CampaignModel campaignmodel = CampaignModel(
                        //     //   userId: 1,
                        //     //   workerId: null,
                        //     //   ivinId: data,
                        //     //   caste: "string",
                        //     //   profession: 'PoliticalDesignation',
                        //     //   contactNumber: '93985824189',
                        //     //   partyInclination: 'Telugu Desam Party',
                        //     //   habitations: null,
                        //     //   schemes: [ "YSR Amma Vodi Scheme"],
                        //     //   otherparty: 'String',
                        //     //   isInfluencer: true,
                        //     //   influencedVoters: 25,
                        //     //   physicallyChallenged: true,
                        //     //   deleted: true,
                        //     //   duplicate: true,
                        //     //   nonLocalAddress: true,
                        //     //   currentAddress: 'string',
                        //     //   expired: true,
                        //     //   strength: "strenhd",
                        //     //   weakness: "weakness",
                        //     //   dissident: true,
                        //     //   informedPersonForDissident: 'string',
                        //     //   commentsForDissident: 'string',
                        //     //   contactMode: "PersonalContacted",
                        //     //   contactedBy: "string",
                        //     //   commentsForTeamContacted: "string",
                        //     //   interestToJoinParty: true,
                        //     //   informedPerson: 'string',
                        //     //   commentsForJoinParty: 'string',
                        //     //   isVoted: true
                        //     // );
                        //
                        //     controller.campaign_api(
                        //         URLs.campaign_update + data, campaignmodel);
                        //   },
                        // ),










campaign_view_post_controller










// import 'dart:convert';
// import 'package:flutter/cupertino.dart';
// import 'package:http/http.dart' as http;
// import 'package:get/get.dart';
// import 'package:prasada_political_portfolio/app/data/models/response/generic_response.dart';
// import 'package:prasada_political_portfolio/app/data/network/api_service.dart';
// import 'package:prasada_political_portfolio/app/modules/voterdetails/controller/votercontroller.dart';
// import 'package:prasada_political_portfolio/utils/loader/loading_utils.dart';
// import 'package:prasada_political_portfolio/utils/snackbar/snachbar.dart';
//
// import '../../../../widgets/custom_widgets.dart';
//
// import '../../../data/models/request/campaignmodel.dart';
// import '../../../data/models/response/getcampaign.dart';
// import '../../../data/values/urls.dart';
// import '../../../routes/app_routes.dart';
//
// Campaignget campa = Campaignget();
//
// class CampaignController extends GetxController {
//   ApiService apiService = ApiService();
//
//   VoterDetailsController voterdetails = VoterDetailsController();
//
//   // SchemeModel schememodel = SchemeModel();
//   var currentIndex = 0.obs;
//   RxInt IconColor = RxInt(0);
//   RxInt indexvalue = RxInt(0);
//   RxBool personstatus = true.obs;
//   RxString DropdownValue = "--Select--".obs;
//   RxBool changeTextField = false.obs;
//   RxBool isTicked = false.obs;
//   RxBool influencer_checkbox = false.obs;
//   RxBool isTicked_3 = false.obs;
//   RxBool isTicked_4 = false.obs;
//   Rx<bool?> checkbox_1 = false.obs;
//   Rx<bool?> checkbox_2 = false.obs;
//   Rx<bool?> checkbox_3 = false.obs;
//   Rx<bool?> checkbox_4 = false.obs;
//   RxList<bool> checkvalues = <bool>[].obs;
//   RxBool check = false.obs;
//   RxList schemes = RxList([]);
//   List<String> schemesstringlist = [];
//   RxList schemelist = RxList([]);
//   //User Entered Texts Controller//
//   RxString casteText = RxString("");
//   RxString profText = RxString("");
//   RxString contactText = RxString("");
//   RxString partyText = RxString("");
//   RxString strText = RxString("");
//   RxString weakText = RxString("");
//   RxString con_1Text = RxString("");
//   RxString com_1Text = RxString("");
//   RxString nlAddressText = RxString("");
//   RxString nlAddress_1Text = RxString("");
//   RxString infText_1 = RxString("");
//   RxString infText_2 = RxString("");
//   RxString infText_3 = RxString("");
//   RxString infText_4 = RxString("");
//   RxString commentsText = RxString("");
//   final TextEditingController caste = TextEditingController();
//   final TextEditingController non_local_address = TextEditingController();
//   final TextEditingController influencer = TextEditingController();
//   final TextEditingController information = TextEditingController();
//   final TextEditingController strength = TextEditingController();
//   final TextEditingController weakness = TextEditingController();
//   final TextEditingController dissident = TextEditingController();
//   final TextEditingController dissident_comment = TextEditingController();
//   final TextEditingController comment_contacted = TextEditingController();
//   final TextEditingController comment_join_party = TextEditingController();
//   final TextEditingController contactedby = TextEditingController();
//   RxList<String> partylist = RxList();
//   List pages = [Routes.CampaignViewupdate, Routes.edit];
//
//   @override
//   void onInit() {
//     var datra = Get.arguments;
//     print('-------- datra---- -${datra.result[0].caste}');
//     try{
//     caste.text = datra.result[0].caste==null?'':datra.result[0].caste;}on Exception{caste.text="";}
//     PartyInclination(URLs.partyname);
//     schemepost(URLs.scheme);
//     super.onInit();
//   }
//
//   partychange(String val) {
//     partyText.value = val;
//   }
//
//   Future PartyInclination(url) async {
//     print("object----------------170-------");
//     var client = http.Client();
//     var respo = await client.get(Uri.parse(url),
//         headers: {'accept': 'application/json', 'Authorization': token});
//     print(respo.statusCode);
//     print(jsonDecode(respo.body));
//     var x = jsonDecode(respo.body)["Result"];
//     for (var i in x) {
//       partylist.add(i['PartyName']);
//     }
//     print(partylist);
//
//     // return getmodel;
//   }
//
//   changePage(int index) {
//     currentIndex.value = index;
//     IconColor = RxInt(index);
//     Get.toNamed(pages[index]);
//   }
//
//   void switchStatus(bool val) {
//     personstatus.value = val;
//   }
//
//   Dropdownstatus(String value) {
//     DropdownValue.value = value;
//     value == 'TeamContacted' ? onChangeField(true) : onChangeField(false);
//   }
//
//   onChangeField(bool val) {
//     changeTextField.value = val;
//   }
//
//   onTickBox(bool val) {
//     isTicked.value = val;
//   }
//
//   onTickBox2(bool val) {
//     influencer_checkbox.value = val;
//   }
//
//   onTickBox3(bool val) {
//     isTicked_3.value = val;
//   }
//
//   onTickBox4(bool val) {
//     isTicked_4.value = val;
//   }
//
//   onSelectItems_1(bool val) {
//     checkbox_1.value = val;
//   }
//
//   onSelectItems_2(bool val) {
//     checkbox_2.value = val;
//   }
//
//   onSelectItems_3(bool val) {
//     checkbox_3.value = val;
//   }
//
//   onSelectItems_4(bool val) {
//     checkbox_4.value = val;
//   }
//
//   onCheckList(bool val, int index) {
//     check.value = val;
//     checkvalues[index] = !checkvalues[index];
//     if (checkvalues[index]) {
//       schemes.add(schemelist[index]['SchemeName']);
//       schemesstringlist.add(schemelist[index]['SchemeName']);
//     } else {
//       schemes.remove(schemelist[index]['SchemeName']);
//       schemesstringlist.remove(schemelist[index]['SchemeName']);
//     }
//   }
//
//   onDeleteItem(int index) {
//     schemes.removeAt(index);
//   }
//
//   void schemepost(url) async {
//     var client = http.Client();
//     var respo = await client.get(Uri.parse(url),
//         headers: {'accept': 'application/json', 'Authorization': token});
//     print(respo.statusCode);
//     var x = jsonDecode(respo.body);
//     print(x);
//     schemelist = RxList(x["Result"]);
//     for (int i = 0; i < schemelist.length - 1; i++) {
//       checkvalues.add(false);
//     }
//     print("-------------line schemes $schemelist");
//     // return schememodel;
//   }
//
//   campaign_api(url, campaignmodel) async {
//     print("-------167 -----${contactText.value}");
//
//     if (contactText.value.length == 10) {
//       try {
//         GenericResponse response =
//             await apiService.post(url: url, model: campaignmodel.toJson());
//
//         print("--- update ---${response.status}");
//
//         if (response.status == 200) {
//           InfoSnackBar("UPDATE Sucess", "Update success ");
//         } else {
//           Error_message("Updated falied", "Already User exits");
//         }
//       } on Exception {
//         Error_message("Updated falied", "Something went Wrong");
//       }
//     } else {
//       Error_message(
//           "Invalid Contact Number", "Enter Valid 10 digits Contact Number");
//     }
//     print("object");
//   }
//
// // void campaign_get_api(url) async {
// //   // String queryString = model != null ? Uri(queryParameters: model).query : '';
// //   try {
// //     // LoadingUtils.showLoader();
// //
// //     final response = await http.get(
// //         Uri.parse(url),
// //         headers: {'accept': 'application/json', 'Authorization': token});
// //     print(response.statusCode);
// //     print(response.body);
// //     if (response.statusCode == 200 || response.statusCode == 201) {
// //       campa = Campaignget.fromJson(jsonDecode(response.body));
// //       print("-  caste ------- ${campa.result![0].caste}");
// //       print("-  caste ------- ${campa.result![0].ivinId}");
// //       LoadingUtils.hideLoader();
// //       Get.toNamed(Routes.CampaignView);
// //     } else {
// //       // LoadingUtils.hideLoader();
// //       Error_message('No Data Found', '');
// //       print("------------------------------object");
// //       // getcampaignmodel = Getcampaignmodel(message: response.body, hasError: true);
// //     }
// //   } on Exception catch (error) {
// //     print("------------------------------exception");
// //     LoadingUtils.hideLoader();
// //     Error_message('No Data Found', '');
// //     // getcampaignmodel = Getcampaignmodel(message: error.toString(), hasError: true);
// //
// //   }
// //
// //
// //
// // }
//
//   CampaignUpdate(id, jsonmodel) async {
//     if (contactText.value.length == 10) {
//       try {
//         var Url = URLs.campaign_update + id.toString();
//         GenericResponse genericResponse =
//             await apiService.put(url: Url, model: jsonmodel);
//         print(genericResponse.message);
//         print(genericResponse.result);
//         print(genericResponse.status);
//         if (genericResponse.status == 200) {
//           InfoSnackBar("Update success", "Campaign update success");
//         } else {
//           Error_message("Update Failed", "Campaign update failed");
//         }
//       } on Exception {
//         Error_message("Update Failed", "Campaign update failed");
//       }
//     } else {
//       Error_message(
//           "Invalid Contact Number", "Enter Valid 10 digits Contact Number");
//     }
//   }
// }

// import 'dart:convert';
// import 'package:flutter/cupertino.dart';
// import 'package:http/http.dart' as http;
// import 'package:get/get.dart';
// import 'package:prasada_political_portfolio/app/data/models/response/generic_response.dart';
// import 'package:prasada_political_portfolio/app/data/network/api_service.dart';
// import 'package:prasada_political_portfolio/app/modules/voterdetails/controller/votercontroller.dart';
// import 'package:prasada_political_portfolio/utils/loader/loading_utils.dart';
// import 'package:prasada_political_portfolio/utils/snackbar/snachbar.dart';
// import '../../../../widgets/custom_widgets.dart';
// import '../../../data/models/request/campaignmodel.dart';
// import '../../../data/models/response/getcampaign.dart';
// import '../../../data/values/urls.dart';
// import '../../../routes/app_routes.dart';
//
// Campaignget campa = Campaignget();
//
// class Campaign_post_Controller extends GetxController {
//   ApiService apiService = ApiService();
//   VoterDetailsController voterdetails = VoterDetailsController();
//   // SchemeModel schememodel = SchemeModel();
//   var currentIndex = 0.obs;
//   RxInt IconColor = RxInt(0);
//   RxInt indexvalue = RxInt(0);
//   RxBool personstatus = true.obs;
//   RxString DropdownValue = "--Select--".obs;
//   RxBool changeTextField = false.obs;
//   RxBool isTicked = false.obs;
//   RxBool influencer_checkbox = false.obs;
//   RxBool isTicked_3 = false.obs;
//   RxBool isTicked_4 = false.obs;
//   Rx<bool?> checkbox_1 = false.obs;
//   Rx<bool?> checkbox_2 = false.obs;
//   Rx<bool?> checkbox_3 = false.obs;
//   Rx<bool?> checkbox_4 = false.obs;
//   RxList<bool> checkvalues = <bool>[].obs;
//   RxBool check = false.obs;
//   RxList schemes = RxList([]);
//   List<String> schemesstringlist = [];
//   RxList schemelist = RxList([]);
//   //User Entered Texts Controller//
//   RxString casteText = RxString("");
//   RxString profText = RxString("");
//   RxString contactText = RxString("");
//   RxString partyText = RxString("");
//   RxString strText = RxString("");
//   RxString weakText = RxString("");
//   RxString con_1Text = RxString("");
//   RxString com_1Text = RxString("");
//   RxString nlAddressText = RxString("");
//   RxString nlAddress_1Text = RxString("");
//   RxString infText_1 = RxString("");
//   RxString infText_2 = RxString("");
//   RxString infText_3 = RxString("");
//   RxString infText_4 = RxString("");
//   RxString commentsText = RxString("");
//   final TextEditingController caste = TextEditingController();
//   final TextEditingController non_local_address = TextEditingController();
//   final TextEditingController influencer = TextEditingController();
//   final TextEditingController information = TextEditingController();
//   final TextEditingController strength = TextEditingController();
//   final TextEditingController weakness = TextEditingController();
//   final TextEditingController dissident = TextEditingController();
//   final TextEditingController dissident_comment = TextEditingController();
//   final TextEditingController comment_contacted = TextEditingController();
//   final TextEditingController comment_join_party = TextEditingController();
//   final TextEditingController contactedby = TextEditingController();
//   RxList<String> partylist = RxList();
//   List pages = [Routes.CampaignViewupdate, Routes.edit];
//
//   @override
//   void onInit() {
//     PartyInclination(URLs.partyname);
//     schemepost(URLs.scheme);
//     super.onInit();
//   }
//
//   partychange(String val) {
//     partyText.value = val;
//   }
//
//   Future PartyInclination(url) async {
//     print("object----------------170-------");
//     var client = http.Client();
//     var respo = await client.get(Uri.parse(url),
//         headers: {'accept': 'application/json', 'Authorization': token});
//     print(respo.statusCode);
//     print(jsonDecode(respo.body));
//     var x = jsonDecode(respo.body)["Result"];
//     for (var i in x) {
//       partylist.add(i['PartyName']);
//     }
//     print(partylist);
//
//     // return getmodel;
//   }
//
//   changePage(int index) {
//     currentIndex.value = index;
//     IconColor = RxInt(index);
//     Get.toNamed(pages[index]);
//   }
//
//   void switchStatus(bool val) {
//     personstatus.value = val;
//   }
//
//   Dropdownstatus(String value) {
//     DropdownValue.value = value;
//     value == 'TeamContacted' ? onChangeField(true) : onChangeField(false);
//   }
//
//   onChangeField(bool val) {
//     changeTextField.value = val;
//   }
//
//   onTickBox(bool val) {
//     isTicked.value = val;
//   }
//
//   onTickBox2(bool val) {
//     influencer_checkbox.value = val;
//   }
//
//   onTickBox3(bool val) {
//     isTicked_3.value = val;
//   }
//
//   onTickBox4(bool val) {
//     isTicked_4.value = val;
//   }
//
//   onSelectItems_1(bool val) {
//     checkbox_1.value = val;
//   }
//
//   onSelectItems_2(bool val) {
//     checkbox_2.value = val;
//   }
//
//   onSelectItems_3(bool val) {
//     checkbox_3.value = val;
//   }
//
//   onSelectItems_4(bool val) {
//     checkbox_4.value = val;
//   }
//
//   onCheckList(bool val, int index) {
//     check.value = val;
//     checkvalues[index] = !checkvalues[index];
//     if (checkvalues[index]) {
//       schemes.add(schemelist[index]['SchemeName']);
//       schemesstringlist.add(schemelist[index]['SchemeName']);
//     } else {
//       schemes.remove(schemelist[index]['SchemeName']);
//       schemesstringlist.remove(schemelist[index]['SchemeName']);
//     }
//   }
//
//   onDeleteItem(int index) {
//     schemes.removeAt(index);
//   }
//
//   void schemepost(url) async {
//     var client = http.Client();
//     var respo = await client.get(Uri.parse(url),
//         headers: {'accept': 'application/json', 'Authorization': token});
//     print(respo.statusCode);
//     var x = jsonDecode(respo.body);
//     print(x);
//     schemelist = RxList(x["Result"]);
//     for (int i = 0; i < schemelist.length - 1; i++) {
//       checkvalues.add(false);
//     }
//     print("-------------line schemes $schemelist");
//     // return schememodel;
//   }
//
//   campaign_api(url, campaignmodel) async {
//     print("-------167 -----${contactText.value}");
//
//     if (contactText.value.length == 10) {
//       try {
//         GenericResponse response =
//         await apiService.post(url: url, model: campaignmodel.toJson());
//
//         print("--- update ---${response.status}");
//
//         if (response.status == 200) {
//           InfoSnackBar("UPDATE Sucess", "Update success ");
//         } else {
//           Error_message("Updated falied", "Already User exits");
//         }
//       } on Exception {
//         Error_message("Updated falied", "Something went Wrong");
//       }
//     } else {
//       Error_message(
//           "Invalid Contact Number", "Enter Valid 10 digits Contact Number");
//     }
//     print("object");
//   }
//
// // void campaign_get_api(url) async {
// //   // String queryString = model != null ? Uri(queryParameters: model).query : '';
// //   try {
// //     // LoadingUtils.showLoader();
// //
// //     final response = await http.get(
// //         Uri.parse(url),
// //         headers: {'accept': 'application/json', 'Authorization': token});
// //     print(response.statusCode);
// //     print(response.body);
// //     if (response.statusCode == 200 || response.statusCode == 201) {
// //       campa = Campaignget.fromJson(jsonDecode(response.body));
// //       print("-  caste ------- ${campa.result![0].caste}");
// //       print("-  caste ------- ${campa.result![0].ivinId}");
// //       LoadingUtils.hideLoader();
// //       Get.toNamed(Routes.CampaignView);
// //     } else {
// //       // LoadingUtils.hideLoader();
// //       Error_message('No Data Found', '');
// //       print("------------------------------object");
// //       // getcampaignmodel = Getcampaignmodel(message: response.body, hasError: true);
// //     }
// //   } on Exception catch (error) {
// //     print("------------------------------exception");
// //     LoadingUtils.hideLoader();
// //     Error_message('No Data Found', '');
// //     // getcampaignmodel = Getcampaignmodel(message: error.toString(), hasError: true);
// //
// //   }
// //
// //
// //
// // }
//
//   CampaignUpdate(id, jsonmodel) async {
//     if (contactText.value.length == 10) {
//       try {
//         var Url = URLs.campaign_update + id.toString();
//         GenericResponse genericResponse =
//         await apiService.put(url: Url, model: jsonmodel);
//         print(genericResponse.message);
//         print(genericResponse.result);
//         print(genericResponse.status);
//         if (genericResponse.status == 200) {
//           InfoSnackBar("Update success", "Campaign update success");
//         } else {
//           Error_message("Update Failed", "Campaign update failed");
//         }
//       } on Exception {
//         Error_message("Update Failed", "Campaign update failed");
//       }
//     } else {
//       Error_message(
//           "Invalid Contact Number", "Enter Valid 10 digits Contact Number");
//     }
//   }
// }







    



         Campaign_controller









// import 'dart:convert';
// import 'package:flutter/cupertino.dart';
// import 'package:http/http.dart' as http;
// import 'package:get/get.dart';
// import 'package:prasada_political_portfolio/app/data/models/response/generic_response.dart';
// import 'package:prasada_political_portfolio/app/data/network/api_service.dart';
// import 'package:prasada_political_portfolio/app/modules/voterdetails/controller/votercontroller.dart';
// import 'package:prasada_political_portfolio/utils/loader/loading_utils.dart';
// import 'package:prasada_political_portfolio/utils/snackbar/snachbar.dart';
//
// import '../../../../widgets/custom_widgets.dart';
//
// import '../../../data/models/request/campaignmodel.dart';
// import '../../../data/models/response/getcampaign.dart';
// import '../../../data/values/urls.dart';
// import '../../../routes/app_routes.dart';
//
// Campaignget campa = Campaignget();
//
// class CampaignController extends GetxController {
//   ApiService apiService = ApiService();
//
//   VoterDetailsController voterdetails = VoterDetailsController();
//
//   // SchemeModel schememodel = SchemeModel();
//   var currentIndex = 0.obs;
//   RxInt IconColor = RxInt(0);
//   RxInt indexvalue = RxInt(0);
//   RxBool personstatus = true.obs;
//   RxString DropdownValue = "--Select--".obs;
//   RxBool changeTextField = false.obs;
//   RxBool isTicked = false.obs;
//   RxBool influencer_checkbox = false.obs;
//   RxBool isTicked_3 = false.obs;
//   RxBool isTicked_4 = false.obs;
//   Rx<bool?> checkbox_1 = false.obs;
//   Rx<bool?> checkbox_2 = false.obs;
//   Rx<bool?> checkbox_3 = false.obs;
//   Rx<bool?> checkbox_4 = false.obs;
//   RxList<bool> checkvalues = <bool>[].obs;
//   RxBool check = false.obs;
//   RxList schemes = RxList([]);
//   List<String> schemesstringlist = [];
//   RxList schemelist = RxList([]);
//   //User Entered Texts Controller//
//   RxString casteText = RxString("");
//   RxString profText = RxString("");
//   RxString contactText = RxString("");
//   RxString partyText = RxString("");
//   RxString strText = RxString("");
//   RxString weakText = RxString("");
//   RxString con_1Text = RxString("");
//   RxString com_1Text = RxString("");
//   RxString nlAddressText = RxString("");
//   RxString nlAddress_1Text = RxString("");
//   RxString infText_1 = RxString("");
//   RxString infText_2 = RxString("");
//   RxString infText_3 = RxString("");
//   RxString infText_4 = RxString("");
//   RxString commentsText = RxString("");
//   final TextEditingController caste = TextEditingController();
//   final TextEditingController non_local_address = TextEditingController();
//   final TextEditingController influencer = TextEditingController();
//   final TextEditingController information = TextEditingController();
//   final TextEditingController strength = TextEditingController();
//   final TextEditingController weakness = TextEditingController();
//   final TextEditingController dissident = TextEditingController();
//   final TextEditingController dissident_comment = TextEditingController();
//   final TextEditingController comment_contacted = TextEditingController();
//   final TextEditingController comment_join_party = TextEditingController();
//   final TextEditingController contactedby = TextEditingController();
//   RxList<String> partylist = RxList();
//   List pages = [Routes.CampaignViewupdate, Routes.edit];
//
//   @override
//   void onInit() {
//     var datra = Get.arguments;
//     print('-------- datra---- -${datra.result[0].caste}');
//     try{
//     caste.text = datra.result[0].caste==null?'':datra.result[0].caste;}on Exception{caste.text="";}
//     PartyInclination(URLs.partyname);
//     schemepost(URLs.scheme);
//     super.onInit();
//   }
//
//   partychange(String val) {
//     partyText.value = val;
//   }
//
//   Future PartyInclination(url) async {
//     print("object----------------170-------");
//     var client = http.Client();
//     var respo = await client.get(Uri.parse(url),
//         headers: {'accept': 'application/json', 'Authorization': token});
//     print(respo.statusCode);
//     print(jsonDecode(respo.body));
//     var x = jsonDecode(respo.body)["Result"];
//     for (var i in x) {
//       partylist.add(i['PartyName']);
//     }
//     print(partylist);
//
//     // return getmodel;
//   }
//
//   changePage(int index) {
//     currentIndex.value = index;
//     IconColor = RxInt(index);
//     Get.toNamed(pages[index]);
//   }
//
//   void switchStatus(bool val) {
//     personstatus.value = val;
//   }
//
//   Dropdownstatus(String value) {
//     DropdownValue.value = value;
//     value == 'TeamContacted' ? onChangeField(true) : onChangeField(false);
//   }
//
//   onChangeField(bool val) {
//     changeTextField.value = val;
//   }
//
//   onTickBox(bool val) {
//     isTicked.value = val;
//   }
//
//   onTickBox2(bool val) {
//     influencer_checkbox.value = val;
//   }
//
//   onTickBox3(bool val) {
//     isTicked_3.value = val;
//   }
//
//   onTickBox4(bool val) {
//     isTicked_4.value = val;
//   }
//
//   onSelectItems_1(bool val) {
//     checkbox_1.value = val;
//   }
//
//   onSelectItems_2(bool val) {
//     checkbox_2.value = val;
//   }
//
//   onSelectItems_3(bool val) {
//     checkbox_3.value = val;
//   }
//
//   onSelectItems_4(bool val) {
//     checkbox_4.value = val;
//   }
//
//   onCheckList(bool val, int index) {
//     check.value = val;
//     checkvalues[index] = !checkvalues[index];
//     if (checkvalues[index]) {
//       schemes.add(schemelist[index]['SchemeName']);
//       schemesstringlist.add(schemelist[index]['SchemeName']);
//     } else {
//       schemes.remove(schemelist[index]['SchemeName']);
//       schemesstringlist.remove(schemelist[index]['SchemeName']);
//     }
//   }
//
//   onDeleteItem(int index) {
//     schemes.removeAt(index);
//   }
//
//   void schemepost(url) async {
//     var client = http.Client();
//     var respo = await client.get(Uri.parse(url),
//         headers: {'accept': 'application/json', 'Authorization': token});
//     print(respo.statusCode);
//     var x = jsonDecode(respo.body);
//     print(x);
//     schemelist = RxList(x["Result"]);
//     for (int i = 0; i < schemelist.length - 1; i++) {
//       checkvalues.add(false);
//     }
//     print("-------------line schemes $schemelist");
//     // return schememodel;
//   }
//
//   campaign_api(url, campaignmodel) async {
//     print("-------167 -----${contactText.value}");
//
//     if (contactText.value.length == 10) {
//       try {
//         GenericResponse response =
//             await apiService.post(url: url, model: campaignmodel.toJson());
//
//         print("--- update ---${response.status}");
//
//         if (response.status == 200) {
//           InfoSnackBar("UPDATE Sucess", "Update success ");
//         } else {
//           Error_message("Updated falied", "Already User exits");
//         }
//       } on Exception {
//         Error_message("Updated falied", "Something went Wrong");
//       }
//     } else {
//       Error_message(
//           "Invalid Contact Number", "Enter Valid 10 digits Contact Number");
//     }
//     print("object");
//   }
//
// // void campaign_get_api(url) async {
// //   // String queryString = model != null ? Uri(queryParameters: model).query : '';
// //   try {
// //     // LoadingUtils.showLoader();
// //
// //     final response = await http.get(
// //         Uri.parse(url),
// //         headers: {'accept': 'application/json', 'Authorization': token});
// //     print(response.statusCode);
// //     print(response.body);
// //     if (response.statusCode == 200 || response.statusCode == 201) {
// //       campa = Campaignget.fromJson(jsonDecode(response.body));
// //       print("-  caste ------- ${campa.result![0].caste}");
// //       print("-  caste ------- ${campa.result![0].ivinId}");
// //       LoadingUtils.hideLoader();
// //       Get.toNamed(Routes.CampaignView);
// //     } else {
// //       // LoadingUtils.hideLoader();
// //       Error_message('No Data Found', '');
// //       print("------------------------------object");
// //       // getcampaignmodel = Getcampaignmodel(message: response.body, hasError: true);
// //     }
// //   } on Exception catch (error) {
// //     print("------------------------------exception");
// //     LoadingUtils.hideLoader();
// //     Error_message('No Data Found', '');
// //     // getcampaignmodel = Getcampaignmodel(message: error.toString(), hasError: true);
// //
// //   }
// //
// //
// //
// // }
//
//   CampaignUpdate(id, jsonmodel) async {
//     if (contactText.value.length == 10) {
//       try {
//         var Url = URLs.campaign_update + id.toString();
//         GenericResponse genericResponse =
//             await apiService.put(url: Url, model: jsonmodel);
//         print(genericResponse.message);
//         print(genericResponse.result);
//         print(genericResponse.status);
//         if (genericResponse.status == 200) {
//           InfoSnackBar("Update success", "Campaign update success");
//         } else {
//           Error_message("Update Failed", "Campaign update failed");
//         }
//       } on Exception {
//         Error_message("Update Failed", "Campaign update failed");
//       }
//     } else {
//       Error_message(
//           "Invalid Contact Number", "Enter Valid 10 digits Contact Number");
//     }
//   }
// }

// import 'dart:convert';
// import 'package:flutter/cupertino.dart';
// import 'package:http/http.dart' as http;
// import 'package:get/get.dart';
// import 'package:prasada_political_portfolio/app/data/models/response/generic_response.dart';
// import 'package:prasada_political_portfolio/app/data/network/api_service.dart';
// import 'package:prasada_political_portfolio/app/modules/voterdetails/controller/votercontroller.dart';
// import 'package:prasada_political_portfolio/utils/loader/loading_utils.dart';
// import 'package:prasada_political_portfolio/utils/snackbar/snachbar.dart';
// import '../../../../widgets/custom_widgets.dart';
// import '../../../data/models/request/campaignmodel.dart';
// import '../../../data/models/response/getcampaign.dart';
// import '../../../data/values/urls.dart';
// import '../../../routes/app_routes.dart';
//
// Campaignget campa = Campaignget();
//
// class CampaignController extends GetxController {
//   ApiService apiService = ApiService();
//   VoterDetailsController voterdetails = VoterDetailsController();
//   // SchemeModel schememodel = SchemeModel();
//   var currentIndex = 0.obs;
//   RxInt IconColor = RxInt(0);
//   RxInt indexvalue = RxInt(0);
//   RxBool personstatus = true.obs;
//   RxString DropdownValue = "--Select--".obs;
//   RxBool changeTextField = false.obs;
//   RxBool isTicked = false.obs;
//   RxBool influencer_checkbox = false.obs;
//   RxBool isTicked_3 = false.obs;
//   RxBool isTicked_4 = false.obs;
//   Rx<bool?> checkbox_1 = false.obs;
//   Rx<bool?> checkbox_2 = false.obs;
//   Rx<bool?> checkbox_3 = false.obs;
//   Rx<bool?> checkbox_4 = false.obs;
//   RxList<bool> checkvalues = <bool>[].obs;
//   RxBool check = false.obs;
//   RxList schemes = RxList([]);
//   List<String> schemesstringlist = [];
//   RxList schemelist = RxList([]);
//   //User Entered Texts Controller//
//   RxString casteText = RxString("");
//   RxString profText = RxString("");
//   RxString contactText = RxString("");
//   RxString partyText = RxString("");
//   RxString strText = RxString("");
//   RxString weakText = RxString("");
//   RxString con_1Text = RxString("");
//   RxString com_1Text = RxString("");
//   RxString nlAddressText = RxString("");
//   RxString nlAddress_1Text = RxString("");
//   RxString infText_1 = RxString("");
//   RxString infText_2 = RxString("");
//   RxString infText_3 = RxString("");
//   RxString infText_4 = RxString("");
//   RxString commentsText = RxString("");
//   final TextEditingController caste = TextEditingController();
//   final TextEditingController non_local_address = TextEditingController();
//   final TextEditingController influencer = TextEditingController();
//   final TextEditingController information = TextEditingController();
//   final TextEditingController strength = TextEditingController();
//   final TextEditingController weakness = TextEditingController();
//   final TextEditingController dissident = TextEditingController();
//   final TextEditingController dissident_comment = TextEditingController();
//   final TextEditingController comment_contacted = TextEditingController();
//   final TextEditingController comment_join_party = TextEditingController();
//   final TextEditingController contactedby = TextEditingController();
//   RxList<String> partylist = RxList();
//   List pages = [Routes.CampaignViewupdate, Routes.edit];
//
//   @override
//   void onInit() {
//     var datra = Get.arguments;
//     caste.text = datra.result[0].caste;
//     PartyInclination(URLs.partyname);
//     schemepost(URLs.scheme);
//     super.onInit();
//   }
//
//   partychange(String val) {
//     partyText.value = val;
//   }
//
//   Future PartyInclination(url) async {
//     print("object----------------170-------");
//     var client = http.Client();
//     var respo = await client.get(Uri.parse(url),
//         headers: {'accept': 'application/json', 'Authorization': token});
//     print(respo.statusCode);
//     print(jsonDecode(respo.body));
//     var x = jsonDecode(respo.body)["Result"];
//     for (var i in x) {
//       partylist.add(i['PartyName']);
//     }
//     print(partylist);
//
//     // return getmodel;
//   }
//
//   changePage(int index) {
//     currentIndex.value = index;
//     IconColor = RxInt(index);
//     Get.toNamed(pages[index]);
//   }
//
//   void switchStatus(bool val) {
//     personstatus.value = val;
//   }
//
//   Dropdownstatus(String value) {
//     DropdownValue.value = value;
//     value == 'TeamContacted' ? onChangeField(true) : onChangeField(false);
//   }
//
//   onChangeField(bool val) {
//     changeTextField.value = val;
//   }
//
//   onTickBox(bool val) {
//     isTicked.value = val;
//   }
//
//   onTickBox2(bool val) {
//     influencer_checkbox.value = val;
//   }
//
//   onTickBox3(bool val) {
//     isTicked_3.value = val;
//   }
//
//   onTickBox4(bool val) {
//     isTicked_4.value = val;
//   }
//
//   onSelectItems_1(bool val) {
//     checkbox_1.value = val;
//   }
//
//   onSelectItems_2(bool val) {
//     checkbox_2.value = val;
//   }
//
//   onSelectItems_3(bool val) {
//     checkbox_3.value = val;
//   }
//
//   onSelectItems_4(bool val) {
//     checkbox_4.value = val;
//   }
//
//   onCheckList(bool val, int index) {
//     check.value = val;
//     checkvalues[index] = !checkvalues[index];
//     if (checkvalues[index]) {
//       schemes.add(schemelist[index]['SchemeName']);
//       schemesstringlist.add(schemelist[index]['SchemeName']);
//     } else {
//       schemes.remove(schemelist[index]['SchemeName']);
//       schemesstringlist.remove(schemelist[index]['SchemeName']);
//     }
//   }
//
//   onDeleteItem(int index) {
//     schemes.removeAt(index);
//   }
//
//   void schemepost(url) async {
//     var client = http.Client();
//     var respo = await client.get(Uri.parse(url),
//         headers: {'accept': 'application/json', 'Authorization': token});
//     print(respo.statusCode);
//     var x = jsonDecode(respo.body);
//     print(x);
//     schemelist = RxList(x["Result"]);
//     for (int i = 0; i < schemelist.length - 1; i++) {
//       checkvalues.add(false);
//     }
//     print("-------------line schemes $schemelist");
//     // return schememodel;
//   }
//
//   campaign_api(url, campaignmodel) async {
//     print("-------167 -----${contactText.value}");
//
//     if (contactText.value.length == 10) {
//       try {
//         GenericResponse response =
//             await apiService.post(url: url, model: campaignmodel.toJson());
//
//         print("--- update ---${response.status}");
//
//         if (response.status == 200) {
//           InfoSnackBar("UPDATE Sucess", "Update success ");
//         } else {
//           Error_message("Updated falied", "Already User exits");
//         }
//       } on Exception {
//         Error_message("Updated falied", "Something went Wrong");
//       }
//     } else {
//       Error_message(
//           "Invalid Contact Number", "Enter Valid 10 digits Contact Number");
//     }
//     print("object");
//   }
//
// // void campaign_get_api(url) async {
// //   // String queryString = model != null ? Uri(queryParameters: model).query : '';
// //   try {
// //     // LoadingUtils.showLoader();
// //
// //     final response = await http.get(
// //         Uri.parse(url),
// //         headers: {'accept': 'application/json', 'Authorization': token});
// //     print(response.statusCode);
// //     print(response.body);
// //     if (response.statusCode == 200 || response.statusCode == 201) {
// //       campa = Campaignget.fromJson(jsonDecode(response.body));
// //       print("-  caste ------- ${campa.result![0].caste}");
// //       print("-  caste ------- ${campa.result![0].ivinId}");
// //       LoadingUtils.hideLoader();
// //       Get.toNamed(Routes.CampaignView);
// //     } else {
// //       // LoadingUtils.hideLoader();
// //       Error_message('No Data Found', '');
// //       print("------------------------------object");
// //       // getcampaignmodel = Getcampaignmodel(message: response.body, hasError: true);
// //     }
// //   } on Exception catch (error) {
// //     print("------------------------------exception");
// //     LoadingUtils.hideLoader();
// //     Error_message('No Data Found', '');
// //     // getcampaignmodel = Getcampaignmodel(message: error.toString(), hasError: true);
// //
// //   }
// //
// //
// //
// // }
//
//   CampaignUpdate(id, jsonmodel) async {
//     if (contactText.value.length == 10) {
//       try {
//         var Url = URLs.campaign_update + id.toString();
//         GenericResponse genericResponse =
//             await apiService.put(url: Url, model: jsonmodel);
//         print(genericResponse.message);
//         print(genericResponse.result);
//         print(genericResponse.status);
//         if (genericResponse.status == 200) {
//           InfoSnackBar("Update success", "Campaign update success");
//         } else {
//           Error_message("Update Failed", "Campaign update failed");
//         }
//       } on Exception {
//         Error_message("Update Failed", "Campaign update failed");
//       }
//     } else {
//       Error_message(
//           "Invalid Contact Number", "Enter Valid 10 digits Contact Number");
//     }
//   }
// }








   Campaign_model


import 'dart:convert';
/// UserId : 0
/// WorkerId : 0
/// IvinId : 0
/// Caste : "string"
/// Profession : "PoliticalDesignation"
/// ContactNumber : "string"
/// PartyInclination : "string"
/// Habitations : "string"
/// Schemes : ["string"]
/// Otherparty : "string"
/// IsInfluencer : true
/// influenced_Voters : 2147483647
/// PhysicallyChallenged : true
/// Deleted : true
/// Duplicate : true
/// Non_Local_Address : true
/// CurrentAddress : "string"
/// Expired : true
/// Strength : "string"
/// Weakness : "string"
/// Dissident : true
/// InformedPersonForDissident : "string"
/// CommentsForDissident : "string"
/// ContactMode : "PersonalContacted"
/// ContactedBy : "string"
/// CommentsForTeamContacted : "string"
/// InterestToJoinParty : true
/// InformedPerson : "string"
/// CommentsForJoinParty : "string"
/// IsVoted : truef
CampaignModel campaignModelFromJson(String str) => CampaignModel.fromJson(json.decode(str));
String campaignModelToJson(CampaignModel data) => json.encode(data.toJson());
class CampaignModel {
  CampaignModel({
    num? userId,
    num? workerId,
    num? ivinId,
    String? caste,
    String? profession,
    String? contactNumber,
    String? partyInclination,
    String? habitations,
    List<String>? schemes,
    String? otherparty,
    bool? isInfluencer,
    num? influencedVoters,
    bool? physicallyChallenged,
    bool? deleted,
    bool? duplicate,
    bool? nonLocalAddress,
    String? currentAddress,
    bool? expired,
    String? strength,
    String? weakness,
    bool? dissident,
    bool? postelBallot,
    String? informedPersonForDissident,
    String? commentsForDissident,
    String? contactMode,
    String? contactedBy,
    String? commentsForTeamContacted,
    bool? interestToJoinParty,
    String? informedPerson,
    String? commentsForJoinParty,
    bool? isVoted,}){
    _userId = userId;
    _workerId = workerId;
    _ivinId = ivinId;
    _caste = caste;
    _profession = profession;
    _contactNumber = contactNumber;
    _partyInclination = partyInclination;
    _habitations = habitations;
    _schemes = schemes;
    _otherparty = otherparty;
    _isInfluencer = isInfluencer;
    _influencedVoters = influencedVoters;
    _physicallyChallenged = physicallyChallenged;
    _deleted = deleted;
    _duplicate = duplicate;
    _nonLocalAddress = nonLocalAddress;
    _currentAddress = currentAddress;
    _expired = expired;
    _strength = strength;
    _weakness = weakness;
    _dissident = dissident;
    _postelballot = postelBallot;
    _informedPersonForDissident = informedPersonForDissident;
    _commentsForDissident = commentsForDissident;
    _contactMode = contactMode;
    _contactedBy = contactedBy;
    _commentsForTeamContacted = commentsForTeamContacted;
    _interestToJoinParty = interestToJoinParty;
    _informedPerson = informedPerson;
    _commentsForJoinParty = commentsForJoinParty;
    _isVoted = isVoted;
  }

  CampaignModel.fromJson(dynamic json) {
    _userId = json['UserId'];
    _workerId = json['WorkerId'];
    _ivinId = json['IvinId'];
    _caste = json['Caste'];
    _profession = json['Profession'];
    _contactNumber = json['ContactNumber'];
    _partyInclination = json['PartyInclination'];
    _habitations = json['Habitations'];
    _schemes = json['Schemes'] != null ? json['Schemes'].cast<String>() : [];
    _otherparty = json['Otherparty'];
    _isInfluencer = json['IsInfluencer'];
    _influencedVoters = json['influenced_Voters'];
    _physicallyChallenged = json['PhysicallyChallenged'];
    _deleted = json['Deleted'];
    _duplicate = json['Duplicate'];
    _nonLocalAddress = json['Non_Local_Address'];
    _currentAddress = json['CurrentAddress'];
    _expired = json['Expired'];
    _strength = json['Strength'];
    _weakness = json['Weakness'];
    _dissident = json['Dissident'];
    _postelballot = json['PostelBallot'];
    _informedPersonForDissident = json['InformedPersonForDissident'];
    _commentsForDissident = json['CommentsForDissident'];
    _contactMode = json['ContactMode'];
    _contactedBy = json['ContactedBy'];
    _commentsForTeamContacted = json['CommentsForTeamContacted'];
    _interestToJoinParty = json['InterestToJoinParty'];
    _informedPerson = json['InformedPerson'];
    _commentsForJoinParty = json['CommentsForJoinParty'];
    _isVoted = json['IsVoted'];
  }
  num? _userId;
  num? _workerId;
  num? _ivinId;
  String? _caste;
  String? _profession;
  String? _contactNumber;
  String? _partyInclination;
  String? _habitations;
  List<String>? _schemes;
  String? _otherparty;
  bool? _isInfluencer;
  num? _influencedVoters;
  bool? _physicallyChallenged;
  bool? _deleted;
  bool? _duplicate;
  bool? _nonLocalAddress;
  String? _currentAddress;
  bool? _expired;
  String? _strength;
  String? _weakness;
  bool? _dissident;
  bool? _postelballot;
  String? _informedPersonForDissident;
  String? _commentsForDissident;
  String? _contactMode;
  String? _contactedBy;
  String? _commentsForTeamContacted;
  bool? _interestToJoinParty;
  String? _informedPerson;
  String? _commentsForJoinParty;
  bool? _isVoted;
  CampaignModel copyWith({  num? userId,
    num? workerId,
    num? ivinId,
    String? caste,
    String? profession,
    String? contactNumber,
    String? partyInclination,
    String? habitations,
    List<String>? schemes,
    String? otherparty,
    bool? isInfluencer,
    num? influencedVoters,
    bool? physicallyChallenged,
    bool? deleted,
    bool? duplicate,
    bool? nonLocalAddress,
    String? currentAddress,
    bool? expired,
    String? strength,
    String? weakness,
    bool? dissident,
    bool? postelBallot,
    String? informedPersonForDissident,
    String? commentsForDissident,
    String? contactMode,
    String? contactedBy,
    String? commentsForTeamContacted,
    bool? interestToJoinParty,
    String? informedPerson,
    String? commentsForJoinParty,
    bool? isVoted,
  }) => CampaignModel(  userId: userId ?? _userId,
    workerId: workerId ?? _workerId,
    ivinId: ivinId ?? _ivinId,
    caste: caste ?? _caste,
    profession: profession ?? _profession,
    contactNumber: contactNumber ?? _contactNumber,
    partyInclination: partyInclination ?? _partyInclination,
    habitations: habitations ?? _habitations,
    schemes: schemes ?? _schemes,
    otherparty: otherparty ?? _otherparty,
    isInfluencer: isInfluencer ?? _isInfluencer,
    influencedVoters: influencedVoters ?? _influencedVoters,
    physicallyChallenged: physicallyChallenged ?? _physicallyChallenged,
    deleted: deleted ?? _deleted,
    duplicate: duplicate ?? _duplicate,
    nonLocalAddress: nonLocalAddress ?? _nonLocalAddress,
    currentAddress: currentAddress ?? _currentAddress,
    expired: expired ?? _expired,
    strength: strength ?? _strength,
    weakness: weakness ?? _weakness,
    dissident: dissident ?? _dissident,
    postelBallot: postelBallot ?? _postelballot,
    informedPersonForDissident: informedPersonForDissident ?? _informedPersonForDissident,
    commentsForDissident: commentsForDissident ?? _commentsForDissident,
    contactMode: contactMode ?? _contactMode,
    contactedBy: contactedBy ?? _contactedBy,
    commentsForTeamContacted: commentsForTeamContacted ?? _commentsForTeamContacted,
    interestToJoinParty: interestToJoinParty ?? _interestToJoinParty,
    informedPerson: informedPerson ?? _informedPerson,
    commentsForJoinParty: commentsForJoinParty ?? _commentsForJoinParty,
    isVoted: isVoted ?? _isVoted,
  );
  num? get userId => _userId;
  num? get workerId => _workerId;
  num? get ivinId => _ivinId;
  String? get caste => _caste;
  String? get profession => _profession;
  String? get contactNumber => _contactNumber;
  String? get partyInclination => _partyInclination;
  String? get habitations => _habitations;
  List<String>? get schemes => _schemes;
  String? get otherparty => _otherparty;
  bool? get isInfluencer => _isInfluencer;
  num? get influencedVoters => _influencedVoters;
  bool? get physicallyChallenged => _physicallyChallenged;
  bool? get deleted => _deleted;
  bool? get duplicate => _duplicate;
  bool? get nonLocalAddress => _nonLocalAddress;
  String? get currentAddress => _currentAddress;
  bool? get expired => _expired;
  String? get strength => _strength;
  String? get weakness => _weakness;
  bool? get dissident => _dissident;
  bool? get postelBallot => _postelballot;
  String? get informedPersonForDissident => _informedPersonForDissident;
  String? get commentsForDissident => _commentsForDissident;
  String? get contactMode => _contactMode;
  String? get contactedBy => _contactedBy;
  String? get commentsForTeamContacted => _commentsForTeamContacted;
  bool? get interestToJoinParty => _interestToJoinParty;
  String? get informedPerson => _informedPerson;
  String? get commentsForJoinParty => _commentsForJoinParty;
  bool? get isVoted => _isVoted;

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['UserId'] = _userId;
    map['WorkerId'] = _workerId;
    map['IvinId'] = _ivinId;
    map['Caste'] = _caste;
    map['Profession'] = _profession;
    map['ContactNumber'] = _contactNumber;
    map['PartyInclination'] = _partyInclination;
    map['Habitations'] = _habitations;
    map['Schemes'] = _schemes;
    map['Otherparty'] = _otherparty;
    map['IsInfluencer'] = _isInfluencer;
    map['influenced_Voters'] = _influencedVoters;
    map['PhysicallyChallenged'] = _physicallyChallenged;
    map['Deleted'] = _deleted;
    map['Duplicate'] = _duplicate;
    map['Non_Local_Address'] = _nonLocalAddress;
    map['CurrentAddress'] = _currentAddress;
    map['Expired'] = _expired;
    map['Strength'] = _strength;
    map['Weakness'] = _weakness;
    map['Dissident'] = _dissident;
    map['PostelBallot'] = _postelballot;
    map['InformedPersonForDissident'] = _informedPersonForDissident;
    map['CommentsForDissident'] = _commentsForDissident;
    map['ContactMode'] = _contactMode;
    map['ContactedBy'] = _contactedBy;
    map['CommentsForTeamContacted'] = _commentsForTeamContacted;
    map['InterestToJoinParty'] = _interestToJoinParty;
    map['InformedPerson'] = _informedPerson;
    map['CommentsForJoinParty'] = _commentsForJoinParty;
    map['IsVoted'] = _isVoted;
    return map;
  }

}






